
SPWM_TrueSine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000461c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080047b8  080047b8  000147b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049a0  080049a0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080049a0  080049a0  000149a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049a8  080049a8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049a8  080049a8  000149a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049ac  080049ac  000149ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080049b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000001c  080049cc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080049cc  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094d5  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001648  00000000  00000000  00029521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002ab70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015050  00000000  00000000  0002bdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c75  00000000  00000000  00040e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000877fa  00000000  00000000  0004aa7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2277  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b80  00000000  00000000  000d22c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800479c 	.word	0x0800479c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	0800479c 	.word	0x0800479c

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__gedf2>:
 80007a4:	f04f 3cff 	mov.w	ip, #4294967295
 80007a8:	e006      	b.n	80007b8 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__ledf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	e002      	b.n	80007b8 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__cmpdf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007ce:	d01b      	beq.n	8000808 <__cmpdf2+0x54>
 80007d0:	b001      	add	sp, #4
 80007d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007d6:	bf0c      	ite	eq
 80007d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007dc:	ea91 0f03 	teqne	r1, r3
 80007e0:	bf02      	ittt	eq
 80007e2:	ea90 0f02 	teqeq	r0, r2
 80007e6:	2000      	moveq	r0, #0
 80007e8:	4770      	bxeq	lr
 80007ea:	f110 0f00 	cmn.w	r0, #0
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf58      	it	pl
 80007f4:	4299      	cmppl	r1, r3
 80007f6:	bf08      	it	eq
 80007f8:	4290      	cmpeq	r0, r2
 80007fa:	bf2c      	ite	cs
 80007fc:	17d8      	asrcs	r0, r3, #31
 80007fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000802:	f040 0001 	orr.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d102      	bne.n	8000818 <__cmpdf2+0x64>
 8000812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000816:	d107      	bne.n	8000828 <__cmpdf2+0x74>
 8000818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800081c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000820:	d1d6      	bne.n	80007d0 <__cmpdf2+0x1c>
 8000822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000826:	d0d3      	beq.n	80007d0 <__cmpdf2+0x1c>
 8000828:	f85d 0b04 	ldr.w	r0, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <__aeabi_cdrcmple>:
 8000830:	4684      	mov	ip, r0
 8000832:	4610      	mov	r0, r2
 8000834:	4662      	mov	r2, ip
 8000836:	468c      	mov	ip, r1
 8000838:	4619      	mov	r1, r3
 800083a:	4663      	mov	r3, ip
 800083c:	e000      	b.n	8000840 <__aeabi_cdcmpeq>
 800083e:	bf00      	nop

08000840 <__aeabi_cdcmpeq>:
 8000840:	b501      	push	{r0, lr}
 8000842:	f7ff ffb7 	bl	80007b4 <__cmpdf2>
 8000846:	2800      	cmp	r0, #0
 8000848:	bf48      	it	mi
 800084a:	f110 0f00 	cmnmi.w	r0, #0
 800084e:	bd01      	pop	{r0, pc}

08000850 <__aeabi_dcmpeq>:
 8000850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000854:	f7ff fff4 	bl	8000840 <__aeabi_cdcmpeq>
 8000858:	bf0c      	ite	eq
 800085a:	2001      	moveq	r0, #1
 800085c:	2000      	movne	r0, #0
 800085e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000862:	bf00      	nop

08000864 <__aeabi_dcmplt>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff ffea 	bl	8000840 <__aeabi_cdcmpeq>
 800086c:	bf34      	ite	cc
 800086e:	2001      	movcc	r0, #1
 8000870:	2000      	movcs	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmple>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffe0 	bl	8000840 <__aeabi_cdcmpeq>
 8000880:	bf94      	ite	ls
 8000882:	2001      	movls	r0, #1
 8000884:	2000      	movhi	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmpge>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffce 	bl	8000830 <__aeabi_cdrcmple>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpgt>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffc4 	bl	8000830 <__aeabi_cdrcmple>
 80008a8:	bf34      	ite	cc
 80008aa:	2001      	movcc	r0, #1
 80008ac:	2000      	movcs	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_d2iz>:
 80008b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008bc:	d215      	bcs.n	80008ea <__aeabi_d2iz+0x36>
 80008be:	d511      	bpl.n	80008e4 <__aeabi_d2iz+0x30>
 80008c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c8:	d912      	bls.n	80008f0 <__aeabi_d2iz+0x3c>
 80008ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008da:	fa23 f002 	lsr.w	r0, r3, r2
 80008de:	bf18      	it	ne
 80008e0:	4240      	negne	r0, r0
 80008e2:	4770      	bx	lr
 80008e4:	f04f 0000 	mov.w	r0, #0
 80008e8:	4770      	bx	lr
 80008ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ee:	d105      	bne.n	80008fc <__aeabi_d2iz+0x48>
 80008f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008f4:	bf08      	it	eq
 80008f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008fa:	4770      	bx	lr
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop

08000904 <__aeabi_d2f>:
 8000904:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000908:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800090c:	bf24      	itt	cs
 800090e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000912:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000916:	d90d      	bls.n	8000934 <__aeabi_d2f+0x30>
 8000918:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800091c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000920:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000924:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000928:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800092c:	bf08      	it	eq
 800092e:	f020 0001 	biceq.w	r0, r0, #1
 8000932:	4770      	bx	lr
 8000934:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000938:	d121      	bne.n	800097e <__aeabi_d2f+0x7a>
 800093a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800093e:	bfbc      	itt	lt
 8000940:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000944:	4770      	bxlt	lr
 8000946:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800094e:	f1c2 0218 	rsb	r2, r2, #24
 8000952:	f1c2 0c20 	rsb	ip, r2, #32
 8000956:	fa10 f30c 	lsls.w	r3, r0, ip
 800095a:	fa20 f002 	lsr.w	r0, r0, r2
 800095e:	bf18      	it	ne
 8000960:	f040 0001 	orrne.w	r0, r0, #1
 8000964:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000968:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800096c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000970:	ea40 000c 	orr.w	r0, r0, ip
 8000974:	fa23 f302 	lsr.w	r3, r3, r2
 8000978:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800097c:	e7cc      	b.n	8000918 <__aeabi_d2f+0x14>
 800097e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000982:	d107      	bne.n	8000994 <__aeabi_d2f+0x90>
 8000984:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000988:	bf1e      	ittt	ne
 800098a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800098e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000992:	4770      	bxne	lr
 8000994:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b974 	b.w	8000ca4 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468e      	mov	lr, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14d      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4694      	mov	ip, r2
 80009e6:	d969      	bls.n	8000abc <__udivmoddi4+0xe8>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b152      	cbz	r2, 8000a04 <__udivmoddi4+0x30>
 80009ee:	fa01 f302 	lsl.w	r3, r1, r2
 80009f2:	f1c2 0120 	rsb	r1, r2, #32
 80009f6:	fa20 f101 	lsr.w	r1, r0, r1
 80009fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000a02:	4094      	lsls	r4, r2
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	0c21      	lsrs	r1, r4, #16
 8000a0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a0e:	fa1f f78c 	uxth.w	r7, ip
 8000a12:	fb08 e316 	mls	r3, r8, r6, lr
 8000a16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a1a:	fb06 f107 	mul.w	r1, r6, r7
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2a:	f080 811f 	bcs.w	8000c6c <__udivmoddi4+0x298>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 811c 	bls.w	8000c6c <__udivmoddi4+0x298>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a40:	fb08 3310 	mls	r3, r8, r0, r3
 8000a44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a48:	fb00 f707 	mul.w	r7, r0, r7
 8000a4c:	42a7      	cmp	r7, r4
 8000a4e:	d90a      	bls.n	8000a66 <__udivmoddi4+0x92>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a58:	f080 810a 	bcs.w	8000c70 <__udivmoddi4+0x29c>
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	f240 8107 	bls.w	8000c70 <__udivmoddi4+0x29c>
 8000a62:	4464      	add	r4, ip
 8000a64:	3802      	subs	r0, #2
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	1be4      	subs	r4, r4, r7
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	b11d      	cbz	r5, 8000a78 <__udivmoddi4+0xa4>
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e9c5 4300 	strd	r4, r3, [r5]
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0xc2>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f000 80ef 	beq.w	8000c66 <__udivmoddi4+0x292>
 8000a88:	2600      	movs	r6, #0
 8000a8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	fab3 f683 	clz	r6, r3
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d14a      	bne.n	8000b34 <__udivmoddi4+0x160>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xd4>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80f9 	bhi.w	8000c9a <__udivmoddi4+0x2c6>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d0e0      	beq.n	8000a78 <__udivmoddi4+0xa4>
 8000ab6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aba:	e7dd      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000abc:	b902      	cbnz	r2, 8000ac0 <__udivmoddi4+0xec>
 8000abe:	deff      	udf	#255	; 0xff
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f040 8092 	bne.w	8000bee <__udivmoddi4+0x21a>
 8000aca:	eba1 010c 	sub.w	r1, r1, ip
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f fe8c 	uxth.w	lr, ip
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	0c20      	lsrs	r0, r4, #16
 8000ada:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ade:	fb07 1113 	mls	r1, r7, r3, r1
 8000ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae6:	fb0e f003 	mul.w	r0, lr, r3
 8000aea:	4288      	cmp	r0, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x12c>
 8000aee:	eb1c 0101 	adds.w	r1, ip, r1
 8000af2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x12a>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f200 80cb 	bhi.w	8000c94 <__udivmoddi4+0x2c0>
 8000afe:	4643      	mov	r3, r8
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b08:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b10:	fb0e fe00 	mul.w	lr, lr, r0
 8000b14:	45a6      	cmp	lr, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x156>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x154>
 8000b22:	45a6      	cmp	lr, r4
 8000b24:	f200 80bb 	bhi.w	8000c9e <__udivmoddi4+0x2ca>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	eba4 040e 	sub.w	r4, r4, lr
 8000b2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b32:	e79c      	b.n	8000a6e <__udivmoddi4+0x9a>
 8000b34:	f1c6 0720 	rsb	r7, r6, #32
 8000b38:	40b3      	lsls	r3, r6
 8000b3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b42:	fa20 f407 	lsr.w	r4, r0, r7
 8000b46:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	40f9      	lsrs	r1, r7
 8000b4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b52:	fa00 f306 	lsl.w	r3, r0, r6
 8000b56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b5a:	0c20      	lsrs	r0, r4, #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fb09 1118 	mls	r1, r9, r8, r1
 8000b64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b68:	fb08 f00e 	mul.w	r0, r8, lr
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b72:	d90b      	bls.n	8000b8c <__udivmoddi4+0x1b8>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b7c:	f080 8088 	bcs.w	8000c90 <__udivmoddi4+0x2bc>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f240 8085 	bls.w	8000c90 <__udivmoddi4+0x2bc>
 8000b86:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8a:	4461      	add	r1, ip
 8000b8c:	1a09      	subs	r1, r1, r0
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b94:	fb09 1110 	mls	r1, r9, r0, r1
 8000b98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	458e      	cmp	lr, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1e2>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bac:	d26c      	bcs.n	8000c88 <__udivmoddi4+0x2b4>
 8000bae:	458e      	cmp	lr, r1
 8000bb0:	d96a      	bls.n	8000c88 <__udivmoddi4+0x2b4>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bba:	fba0 9402 	umull	r9, r4, r0, r2
 8000bbe:	eba1 010e 	sub.w	r1, r1, lr
 8000bc2:	42a1      	cmp	r1, r4
 8000bc4:	46c8      	mov	r8, r9
 8000bc6:	46a6      	mov	lr, r4
 8000bc8:	d356      	bcc.n	8000c78 <__udivmoddi4+0x2a4>
 8000bca:	d053      	beq.n	8000c74 <__udivmoddi4+0x2a0>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x212>
 8000bce:	ebb3 0208 	subs.w	r2, r3, r8
 8000bd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bda:	fa22 f306 	lsr.w	r3, r2, r6
 8000bde:	40f1      	lsrs	r1, r6
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e9c5 7100 	strd	r7, r1, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c10:	0c0b      	lsrs	r3, r1, #16
 8000c12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c16:	fb00 f60e 	mul.w	r6, r0, lr
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x260>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c2a:	d22f      	bcs.n	8000c8c <__udivmoddi4+0x2b8>
 8000c2c:	429e      	cmp	r6, r3
 8000c2e:	d92d      	bls.n	8000c8c <__udivmoddi4+0x2b8>
 8000c30:	3802      	subs	r0, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	b289      	uxth	r1, r1
 8000c38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb06 f30e 	mul.w	r3, r6, lr
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x28a>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c54:	d216      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d914      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c5a:	3e02      	subs	r6, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c64:	e738      	b.n	8000ad8 <__udivmoddi4+0x104>
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e705      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e3      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6f8      	b.n	8000a66 <__udivmoddi4+0x92>
 8000c74:	454b      	cmp	r3, r9
 8000c76:	d2a9      	bcs.n	8000bcc <__udivmoddi4+0x1f8>
 8000c78:	ebb9 0802 	subs.w	r8, r9, r2
 8000c7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7a3      	b.n	8000bcc <__udivmoddi4+0x1f8>
 8000c84:	4646      	mov	r6, r8
 8000c86:	e7ea      	b.n	8000c5e <__udivmoddi4+0x28a>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	e794      	b.n	8000bb6 <__udivmoddi4+0x1e2>
 8000c8c:	4640      	mov	r0, r8
 8000c8e:	e7d1      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c90:	46d0      	mov	r8, sl
 8000c92:	e77b      	b.n	8000b8c <__udivmoddi4+0x1b8>
 8000c94:	3b02      	subs	r3, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	e732      	b.n	8000b00 <__udivmoddi4+0x12c>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e709      	b.n	8000ab2 <__udivmoddi4+0xde>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e742      	b.n	8000b2a <__udivmoddi4+0x156>

08000ca4 <__aeabi_idiv0>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f000 fd68 	bl	8001780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f82a 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f000 fa06 	bl	80010c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cb8:	f000 f88e 	bl	8000dd8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000cbc:	f000 f92a 	bl	8000f14 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cc0:	f000 f974 	bl	8000fac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <main+0x54>)
 8000cc8:	f001 fda2 	bl	8002810 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480b      	ldr	r0, [pc, #44]	; (8000cfc <main+0x54>)
 8000cd0:	f001 fd9e 	bl	8002810 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	4809      	ldr	r0, [pc, #36]	; (8000cfc <main+0x54>)
 8000cd8:	f001 fd9a 	bl	8002810 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4808      	ldr	r0, [pc, #32]	; (8000d00 <main+0x58>)
 8000ce0:	f001 fd96 	bl	8002810 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000ce4:	2104      	movs	r1, #4
 8000ce6:	4806      	ldr	r0, [pc, #24]	; (8000d00 <main+0x58>)
 8000ce8:	f001 fd92 	bl	8002810 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000cec:	2108      	movs	r1, #8
 8000cee:	4804      	ldr	r0, [pc, #16]	; (8000d00 <main+0x58>)
 8000cf0:	f001 fd8e 	bl	8002810 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim3);
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <main+0x5c>)
 8000cf6:	f001 fcd9 	bl	80026ac <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <main+0x52>
 8000cfc:	20000038 	.word	0x20000038
 8000d00:	200000c8 	.word	0x200000c8
 8000d04:	20000080 	.word	0x20000080

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b094      	sub	sp, #80	; 0x50
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0320 	add.w	r3, r7, #32
 8000d12:	2230      	movs	r2, #48	; 0x30
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 fd38 	bl	800478c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <SystemClock_Config+0xc8>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	4a26      	ldr	r2, [pc, #152]	; (8000dd0 <SystemClock_Config+0xc8>)
 8000d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3c:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <SystemClock_Config+0xc8>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <SystemClock_Config+0xcc>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <SystemClock_Config+0xcc>)
 8000d52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <SystemClock_Config+0xcc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d64:	2302      	movs	r3, #2
 8000d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6c:	2310      	movs	r3, #16
 8000d6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d70:	2302      	movs	r3, #2
 8000d72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d74:	2300      	movs	r3, #0
 8000d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000d7c:	2364      	movs	r3, #100	; 0x64
 8000d7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d84:	2304      	movs	r3, #4
 8000d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	f107 0320 	add.w	r3, r7, #32
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 f819 	bl	8001dc4 <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d98:	f000 fb90 	bl	80014bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da0:	2302      	movs	r3, #2
 8000da2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	2103      	movs	r1, #3
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 fa7b 	bl	80022b4 <HAL_RCC_ClockConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dc4:	f000 fb7a 	bl	80014bc <Error_Handler>
  }
}
 8000dc8:	bf00      	nop
 8000dca:	3750      	adds	r7, #80	; 0x50
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40007000 	.word	0x40007000

08000dd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b092      	sub	sp, #72	; 0x48
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2220      	movs	r2, #32
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f003 fcc2 	bl	800478c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e08:	4b40      	ldr	r3, [pc, #256]	; (8000f0c <MX_TIM1_Init+0x134>)
 8000e0a:	4a41      	ldr	r2, [pc, #260]	; (8000f10 <MX_TIM1_Init+0x138>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8000e0e:	4b3f      	ldr	r3, [pc, #252]	; (8000f0c <MX_TIM1_Init+0x134>)
 8000e10:	2263      	movs	r2, #99	; 0x63
 8000e12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e14:	4b3d      	ldr	r3, [pc, #244]	; (8000f0c <MX_TIM1_Init+0x134>)
 8000e16:	2220      	movs	r2, #32
 8000e18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000e1a:	4b3c      	ldr	r3, [pc, #240]	; (8000f0c <MX_TIM1_Init+0x134>)
 8000e1c:	2263      	movs	r2, #99	; 0x63
 8000e1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b3a      	ldr	r3, [pc, #232]	; (8000f0c <MX_TIM1_Init+0x134>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e26:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <MX_TIM1_Init+0x134>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e2c:	4b37      	ldr	r3, [pc, #220]	; (8000f0c <MX_TIM1_Init+0x134>)
 8000e2e:	2280      	movs	r2, #128	; 0x80
 8000e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e32:	4836      	ldr	r0, [pc, #216]	; (8000f0c <MX_TIM1_Init+0x134>)
 8000e34:	f001 fc9c 	bl	8002770 <HAL_TIM_PWM_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000e3e:	f000 fb3d 	bl	80014bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e4e:	4619      	mov	r1, r3
 8000e50:	482e      	ldr	r0, [pc, #184]	; (8000f0c <MX_TIM1_Init+0x134>)
 8000e52:	f002 fb13 	bl	800347c <HAL_TIMEx_MasterConfigSynchronization>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000e5c:	f000 fb2e 	bl	80014bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e60:	2360      	movs	r3, #96	; 0x60
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	2200      	movs	r2, #0
 8000e82:	4619      	mov	r1, r3
 8000e84:	4821      	ldr	r0, [pc, #132]	; (8000f0c <MX_TIM1_Init+0x134>)
 8000e86:	f001 fe7b 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000e90:	f000 fb14 	bl	80014bc <Error_Handler>
  }
  sConfigOC.Pulse = 100;
 8000e94:	2364      	movs	r3, #100	; 0x64
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	481a      	ldr	r0, [pc, #104]	; (8000f0c <MX_TIM1_Init+0x134>)
 8000ea2:	f001 fe6d 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000eac:	f000 fb06 	bl	80014bc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	2208      	movs	r2, #8
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4813      	ldr	r0, [pc, #76]	; (8000f0c <MX_TIM1_Init+0x134>)
 8000ebe:	f001 fe5f 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000ec8:	f000 faf8 	bl	80014bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <MX_TIM1_Init+0x134>)
 8000ef0:	f002 fb32 	bl	8003558 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000efa:	f000 fadf 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <MX_TIM1_Init+0x134>)
 8000f00:	f000 fb6a 	bl	80015d8 <HAL_TIM_MspPostInit>

}
 8000f04:	bf00      	nop
 8000f06:	3748      	adds	r7, #72	; 0x48
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000038 	.word	0x20000038
 8000f10:	40010000 	.word	0x40010000

08000f14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MX_TIM3_Init+0x90>)
 8000f32:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <MX_TIM3_Init+0x94>)
 8000f34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_TIM3_Init+0x90>)
 8000f38:	2263      	movs	r2, #99	; 0x63
 8000f3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <MX_TIM3_Init+0x90>)
 8000f3e:	2220      	movs	r2, #32
 8000f40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50-1;
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_TIM3_Init+0x90>)
 8000f44:	2231      	movs	r2, #49	; 0x31
 8000f46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_TIM3_Init+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_TIM3_Init+0x90>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f54:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <MX_TIM3_Init+0x90>)
 8000f56:	f001 fb59 	bl	800260c <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000f60:	f000 faac 	bl	80014bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <MX_TIM3_Init+0x90>)
 8000f72:	f001 fec7 	bl	8002d04 <HAL_TIM_ConfigClockSource>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000f7c:	f000 fa9e 	bl	80014bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_TIM3_Init+0x90>)
 8000f8e:	f002 fa75 	bl	800347c <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000f98:	f000 fa90 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000080 	.word	0x20000080
 8000fa8:	40000400 	.word	0x40000400

08000fac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08e      	sub	sp, #56	; 0x38
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc0:	f107 0320 	add.w	r3, r7, #32
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	615a      	str	r2, [r3, #20]
 8000fda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fdc:	4b37      	ldr	r3, [pc, #220]	; (80010bc <MX_TIM4_Init+0x110>)
 8000fde:	4a38      	ldr	r2, [pc, #224]	; (80010c0 <MX_TIM4_Init+0x114>)
 8000fe0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000fe2:	4b36      	ldr	r3, [pc, #216]	; (80010bc <MX_TIM4_Init+0x110>)
 8000fe4:	2263      	movs	r2, #99	; 0x63
 8000fe6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000fe8:	4b34      	ldr	r3, [pc, #208]	; (80010bc <MX_TIM4_Init+0x110>)
 8000fea:	2220      	movs	r2, #32
 8000fec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000fee:	4b33      	ldr	r3, [pc, #204]	; (80010bc <MX_TIM4_Init+0x110>)
 8000ff0:	2263      	movs	r2, #99	; 0x63
 8000ff2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <MX_TIM4_Init+0x110>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffa:	4b30      	ldr	r3, [pc, #192]	; (80010bc <MX_TIM4_Init+0x110>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001000:	482e      	ldr	r0, [pc, #184]	; (80010bc <MX_TIM4_Init+0x110>)
 8001002:	f001 fb03 	bl	800260c <HAL_TIM_Base_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800100c:	f000 fa56 	bl	80014bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101a:	4619      	mov	r1, r3
 800101c:	4827      	ldr	r0, [pc, #156]	; (80010bc <MX_TIM4_Init+0x110>)
 800101e:	f001 fe71 	bl	8002d04 <HAL_TIM_ConfigClockSource>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001028:	f000 fa48 	bl	80014bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800102c:	4823      	ldr	r0, [pc, #140]	; (80010bc <MX_TIM4_Init+0x110>)
 800102e:	f001 fb9f 	bl	8002770 <HAL_TIM_PWM_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001038:	f000 fa40 	bl	80014bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001044:	f107 0320 	add.w	r3, r7, #32
 8001048:	4619      	mov	r1, r3
 800104a:	481c      	ldr	r0, [pc, #112]	; (80010bc <MX_TIM4_Init+0x110>)
 800104c:	f002 fa16 	bl	800347c <HAL_TIMEx_MasterConfigSynchronization>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001056:	f000 fa31 	bl	80014bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105a:	2360      	movs	r3, #96	; 0x60
 800105c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	4619      	mov	r1, r3
 8001070:	4812      	ldr	r0, [pc, #72]	; (80010bc <MX_TIM4_Init+0x110>)
 8001072:	f001 fd85 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800107c:	f000 fa1e 	bl	80014bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2204      	movs	r2, #4
 8001084:	4619      	mov	r1, r3
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <MX_TIM4_Init+0x110>)
 8001088:	f001 fd7a 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8001092:	f000 fa13 	bl	80014bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2208      	movs	r2, #8
 800109a:	4619      	mov	r1, r3
 800109c:	4807      	ldr	r0, [pc, #28]	; (80010bc <MX_TIM4_Init+0x110>)
 800109e:	f001 fd6f 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 80010a8:	f000 fa08 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <MX_TIM4_Init+0x110>)
 80010ae:	f000 fa93 	bl	80015d8 <HAL_TIM_MspPostInit>

}
 80010b2:	bf00      	nop
 80010b4:	3738      	adds	r7, #56	; 0x38
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200000c8 	.word	0x200000c8
 80010c0:	40000800 	.word	0x40000800

080010c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <MX_GPIO_Init+0x9c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <MX_GPIO_Init+0x9c>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_GPIO_Init+0x9c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_GPIO_Init+0x9c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a18      	ldr	r2, [pc, #96]	; (8001160 <MX_GPIO_Init+0x9c>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_GPIO_Init+0x9c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_GPIO_Init+0x9c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a11      	ldr	r2, [pc, #68]	; (8001160 <MX_GPIO_Init+0x9c>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_GPIO_Init+0x9c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001134:	480b      	ldr	r0, [pc, #44]	; (8001164 <MX_GPIO_Init+0xa0>)
 8001136:	f000 fe2b 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800113a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	4619      	mov	r1, r3
 8001152:	4804      	ldr	r0, [pc, #16]	; (8001164 <MX_GPIO_Init+0xa0>)
 8001154:	f000 fc98 	bl	8001a88 <HAL_GPIO_Init>

}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40020800 	.word	0x40020800

08001168 <HAL_TIM_PeriodElapsedCallback>:
float offset240 = (2.0/3.0) * sampleNum;

float sin_val0, sin_val120, sin_val240;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	sin_val0 =  amplitude * sin (radVal * i);
 8001170:	4bc2      	ldr	r3, [pc, #776]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff faaa 	bl	80006d0 <__aeabi_i2d>
 800117c:	4604      	mov	r4, r0
 800117e:	460d      	mov	r5, r1
 8001180:	4bbf      	ldr	r3, [pc, #764]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800118c:	4bbd      	ldr	r3, [pc, #756]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001196:	ee17 0a90 	vmov	r0, s15
 800119a:	f7ff faab 	bl	80006f4 <__aeabi_f2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	ec43 2b10 	vmov	d0, r2, r3
 80011a6:	f002 fa83 	bl	80036b0 <sin>
 80011aa:	ec53 2b10 	vmov	r2, r3, d0
 80011ae:	4620      	mov	r0, r4
 80011b0:	4629      	mov	r1, r5
 80011b2:	f7ff f811 	bl	80001d8 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fba1 	bl	8000904 <__aeabi_d2f>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4ab0      	ldr	r2, [pc, #704]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80011c6:	6013      	str	r3, [r2, #0]
	sin_val0 = round(sin_val0);
 80011c8:	4baf      	ldr	r3, [pc, #700]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fa91 	bl	80006f4 <__aeabi_f2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	ec43 2b10 	vmov	d0, r2, r3
 80011da:	f002 fa23 	bl	8003624 <round>
 80011de:	ec53 2b10 	vmov	r2, r3, d0
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fb8d 	bl	8000904 <__aeabi_d2f>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4aa6      	ldr	r2, [pc, #664]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80011ee:	6013      	str	r3, [r2, #0]

	sin_val120 = amplitude * sin (radVal * (i + offset120));
 80011f0:	4ba2      	ldr	r3, [pc, #648]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x314>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fa6a 	bl	80006d0 <__aeabi_i2d>
 80011fc:	4604      	mov	r4, r0
 80011fe:	460d      	mov	r5, r1
 8001200:	4b9f      	ldr	r3, [pc, #636]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120c:	4b9f      	ldr	r3, [pc, #636]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001216:	4b9b      	ldr	r3, [pc, #620]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001220:	ee17 0a90 	vmov	r0, s15
 8001224:	f7ff fa66 	bl	80006f4 <__aeabi_f2d>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	ec43 2b10 	vmov	d0, r2, r3
 8001230:	f002 fa3e 	bl	80036b0 <sin>
 8001234:	ec53 2b10 	vmov	r2, r3, d0
 8001238:	4620      	mov	r0, r4
 800123a:	4629      	mov	r1, r5
 800123c:	f7fe ffcc 	bl	80001d8 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff fb5c 	bl	8000904 <__aeabi_d2f>
 800124c:	4603      	mov	r3, r0
 800124e:	4a90      	ldr	r2, [pc, #576]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001250:	6013      	str	r3, [r2, #0]
	sin_val120 = round(sin_val120);
 8001252:	4b8f      	ldr	r3, [pc, #572]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fa4c 	bl	80006f4 <__aeabi_f2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	ec43 2b10 	vmov	d0, r2, r3
 8001264:	f002 f9de 	bl	8003624 <round>
 8001268:	ec53 2b10 	vmov	r2, r3, d0
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fb48 	bl	8000904 <__aeabi_d2f>
 8001274:	4603      	mov	r3, r0
 8001276:	4a86      	ldr	r2, [pc, #536]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001278:	6013      	str	r3, [r2, #0]

	sin_val240 =  amplitude * sin (radVal * (i + offset240));
 800127a:	4b80      	ldr	r3, [pc, #512]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fa25 	bl	80006d0 <__aeabi_i2d>
 8001286:	4604      	mov	r4, r0
 8001288:	460d      	mov	r5, r1
 800128a:	4b7d      	ldr	r3, [pc, #500]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001296:	4b7f      	ldr	r3, [pc, #508]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001298:	edd3 7a00 	vldr	s15, [r3]
 800129c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a0:	4b78      	ldr	r3, [pc, #480]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80012a2:	edd3 7a00 	vldr	s15, [r3]
 80012a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012aa:	ee17 0a90 	vmov	r0, s15
 80012ae:	f7ff fa21 	bl	80006f4 <__aeabi_f2d>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	ec43 2b10 	vmov	d0, r2, r3
 80012ba:	f002 f9f9 	bl	80036b0 <sin>
 80012be:	ec53 2b10 	vmov	r2, r3, d0
 80012c2:	4620      	mov	r0, r4
 80012c4:	4629      	mov	r1, r5
 80012c6:	f7fe ff87 	bl	80001d8 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	f7ff fb17 	bl	8000904 <__aeabi_d2f>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a6f      	ldr	r2, [pc, #444]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80012da:	6013      	str	r3, [r2, #0]
	sin_val240 = round(sin_val240);
 80012dc:	4b6e      	ldr	r3, [pc, #440]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fa07 	bl	80006f4 <__aeabi_f2d>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	ec43 2b10 	vmov	d0, r2, r3
 80012ee:	f002 f999 	bl	8003624 <round>
 80012f2:	ec53 2b10 	vmov	r2, r3, d0
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	f7ff fb03 	bl	8000904 <__aeabi_d2f>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a65      	ldr	r2, [pc, #404]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001302:	6013      	str	r3, [r2, #0]


	if (sin_val0 == 0)   TIM1->CCR1 = 0; TIM4->CCR1 = 0;   //TIM1->CCR1 = abs(sin_val0); //LOW Side
 8001304:	4b60      	ldr	r3, [pc, #384]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	d102      	bne.n	800131a <HAL_TIM_PeriodElapsedCallback+0x1b2>
 8001314:	4b61      	ldr	r3, [pc, #388]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001316:	2200      	movs	r2, #0
 8001318:	635a      	str	r2, [r3, #52]	; 0x34
 800131a:	4b61      	ldr	r3, [pc, #388]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800131c:	2200      	movs	r2, #0
 800131e:	635a      	str	r2, [r3, #52]	; 0x34
	if (sin_val0 > 0)    TIM1->CCR1 = sin_val0;
 8001320:	4b59      	ldr	r3, [pc, #356]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001322:	edd3 7a00 	vldr	s15, [r3]
 8001326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	dd08      	ble.n	8001342 <HAL_TIM_PeriodElapsedCallback+0x1da>
 8001330:	4b55      	ldr	r3, [pc, #340]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001332:	edd3 7a00 	vldr	s15, [r3]
 8001336:	4b59      	ldr	r3, [pc, #356]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800133c:	ee17 2a90 	vmov	r2, s15
 8001340:	635a      	str	r2, [r3, #52]	; 0x34
//	if (sin_val0 < 0)    TIM1->CCR1 = amplitude + sin_val0;
	if (sin_val0 < 0)    TIM4->CCR1 = fabs(sin_val0);
 8001342:	4b51      	ldr	r3, [pc, #324]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001350:	d50a      	bpl.n	8001368 <HAL_TIM_PeriodElapsedCallback+0x200>
 8001352:	4b4d      	ldr	r3, [pc, #308]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	eef0 7ae7 	vabs.f32	s15, s15
 800135c:	4b50      	ldr	r3, [pc, #320]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800135e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001362:	ee17 2a90 	vmov	r2, s15
 8001366:	635a      	str	r2, [r3, #52]	; 0x34

	if (sin_val120 == 0)   TIM1->CCR2 = 0; TIM4->CCR2 = 0;   //WRITE_PERI_REG(DR_REG_PWM0_BASE + 0x007C, 0);
 8001368:	4b49      	ldr	r3, [pc, #292]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001376:	d102      	bne.n	800137e <HAL_TIM_PeriodElapsedCallback+0x216>
 8001378:	4b48      	ldr	r3, [pc, #288]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800137a:	2200      	movs	r2, #0
 800137c:	639a      	str	r2, [r3, #56]	; 0x38
 800137e:	4b48      	ldr	r3, [pc, #288]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001380:	2200      	movs	r2, #0
 8001382:	639a      	str	r2, [r3, #56]	; 0x38
	if (sin_val120 > 0)    TIM1->CCR2 = sin_val120; TIM4->CCR2 = 0;
 8001384:	4b42      	ldr	r3, [pc, #264]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001392:	dd08      	ble.n	80013a6 <HAL_TIM_PeriodElapsedCallback+0x23e>
 8001394:	4b3e      	ldr	r3, [pc, #248]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	4b40      	ldr	r3, [pc, #256]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800139c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a0:	ee17 2a90 	vmov	r2, s15
 80013a4:	639a      	str	r2, [r3, #56]	; 0x38
 80013a6:	4b3e      	ldr	r3, [pc, #248]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	639a      	str	r2, [r3, #56]	; 0x38
//	if (sin_val120 < 0)    TIM1->CCR2 = amplitude + sin_val120;
	if (sin_val120 < 0)    TIM1->CCR2 = 0; TIM4->CCR2 = amplitude + sin_val120;
 80013ac:	4b38      	ldr	r3, [pc, #224]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ba:	d502      	bpl.n	80013c2 <HAL_TIM_PeriodElapsedCallback+0x25a>
 80013bc:	4b37      	ldr	r3, [pc, #220]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80013be:	2200      	movs	r2, #0
 80013c0:	639a      	str	r2, [r3, #56]	; 0x38
 80013c2:	4b2e      	ldr	r3, [pc, #184]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x314>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d0:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013da:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80013dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e0:	ee17 2a90 	vmov	r2, s15
 80013e4:	639a      	str	r2, [r3, #56]	; 0x38

	if (sin_val240 == 0)   TIM1->CCR3 = 0; TIM4->CCR3 = 0;  // TIM1->CCR3 = 0;
 80013e6:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f4:	d102      	bne.n	80013fc <HAL_TIM_PeriodElapsedCallback+0x294>
 80013f6:	4b29      	ldr	r3, [pc, #164]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80013fc:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80013fe:	2200      	movs	r2, #0
 8001400:	63da      	str	r2, [r3, #60]	; 0x3c
	if (sin_val240 > 0)    TIM1->CCR3 = sin_val240; TIM4->CCR3 = 0;
 8001402:	4b25      	ldr	r3, [pc, #148]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800140c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001410:	dd08      	ble.n	8001424 <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8001412:	4b21      	ldr	r3, [pc, #132]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001414:	edd3 7a00 	vldr	s15, [r3]
 8001418:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800141a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141e:	ee17 2a90 	vmov	r2, s15
 8001422:	63da      	str	r2, [r3, #60]	; 0x3c
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001426:	2200      	movs	r2, #0
 8001428:	63da      	str	r2, [r3, #60]	; 0x3c
//	if (sin_val240 < 0)    TIM1->CCR3 = amplitude + sin_val240;
	if (sin_val240 < 0)    TIM1->CCR3 = 0; TIM4->CCR3 = amplitude + sin_val240;
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	d502      	bpl.n	8001440 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 800143a:	4b18      	ldr	r3, [pc, #96]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800143c:	2200      	movs	r2, #0
 800143e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800145a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800145e:	ee17 2a90 	vmov	r2, s15
 8001462:	63da      	str	r2, [r3, #60]	; 0x3c

	i++;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800146e:	701a      	strb	r2, [r3, #0]
	if (i > sampleNum ) i=0;
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b29b      	uxth	r3, r3
 8001476:	22c8      	movs	r2, #200	; 0xc8
 8001478:	e014      	b.n	80014a4 <HAL_TIM_PeriodElapsedCallback+0x33c>
 800147a:	bf00      	nop
 800147c:	20000000 	.word	0x20000000
 8001480:	20000110 	.word	0x20000110
 8001484:	20000004 	.word	0x20000004
 8001488:	20000114 	.word	0x20000114
 800148c:	20000008 	.word	0x20000008
 8001490:	20000118 	.word	0x20000118
 8001494:	2000000c 	.word	0x2000000c
 8001498:	2000011c 	.word	0x2000011c
 800149c:	40010000 	.word	0x40010000
 80014a0:	40000800 	.word	0x40000800
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d902      	bls.n	80014ae <HAL_TIM_PeriodElapsedCallback+0x346>
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
//	}
//
//	i++;
//	if (i > sampleNum ) i=0;

}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bdb0      	pop	{r4, r5, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000110 	.word	0x20000110

080014bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c0:	b672      	cpsid	i
}
 80014c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <Error_Handler+0x8>
	...

080014c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <HAL_MspInit+0x4c>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	4a0f      	ldr	r2, [pc, #60]	; (8001514 <HAL_MspInit+0x4c>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014dc:	6453      	str	r3, [r2, #68]	; 0x44
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <HAL_MspInit+0x4c>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_MspInit+0x4c>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a08      	ldr	r2, [pc, #32]	; (8001514 <HAL_MspInit+0x4c>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_MspInit+0x4c>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800

08001518 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_TIM_PWM_MspInit+0x3c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10d      	bne.n	8001546 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_TIM_PWM_MspInit+0x40>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_TIM_PWM_MspInit+0x40>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_TIM_PWM_MspInit+0x40>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40010000 	.word	0x40010000
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a18      	ldr	r2, [pc, #96]	; (80015cc <HAL_TIM_Base_MspInit+0x70>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d116      	bne.n	800159c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_TIM_Base_MspInit+0x74>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <HAL_TIM_Base_MspInit+0x74>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <HAL_TIM_Base_MspInit+0x74>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	201d      	movs	r0, #29
 8001590:	f000 fa43 	bl	8001a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001594:	201d      	movs	r0, #29
 8001596:	f000 fa5c 	bl	8001a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800159a:	e012      	b.n	80015c2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0c      	ldr	r2, [pc, #48]	; (80015d4 <HAL_TIM_Base_MspInit+0x78>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d10d      	bne.n	80015c2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_TIM_Base_MspInit+0x74>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_TIM_Base_MspInit+0x74>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_TIM_Base_MspInit+0x74>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40000400 	.word	0x40000400
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40000800 	.word	0x40000800

080015d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a25      	ldr	r2, [pc, #148]	; (800168c <HAL_TIM_MspPostInit+0xb4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d11f      	bne.n	800163a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <HAL_TIM_MspPostInit+0xb8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a23      	ldr	r2, [pc, #140]	; (8001690 <HAL_TIM_MspPostInit+0xb8>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <HAL_TIM_MspPostInit+0xb8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001616:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001628:	2301      	movs	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4818      	ldr	r0, [pc, #96]	; (8001694 <HAL_TIM_MspPostInit+0xbc>)
 8001634:	f000 fa28 	bl	8001a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001638:	e023      	b.n	8001682 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a16      	ldr	r2, [pc, #88]	; (8001698 <HAL_TIM_MspPostInit+0xc0>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d11e      	bne.n	8001682 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_TIM_MspPostInit+0xb8>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	4a10      	ldr	r2, [pc, #64]	; (8001690 <HAL_TIM_MspPostInit+0xb8>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	6313      	str	r3, [r2, #48]	; 0x30
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_TIM_MspPostInit+0xb8>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001660:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001672:	2302      	movs	r3, #2
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4807      	ldr	r0, [pc, #28]	; (800169c <HAL_TIM_MspPostInit+0xc4>)
 800167e:	f000 fa03 	bl	8001a88 <HAL_GPIO_Init>
}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	; 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40010000 	.word	0x40010000
 8001690:	40023800 	.word	0x40023800
 8001694:	40020000 	.word	0x40020000
 8001698:	40000800 	.word	0x40000800
 800169c:	40020400 	.word	0x40020400

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <NMI_Handler+0x4>

080016a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <MemManage_Handler+0x4>

080016b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <BusFault_Handler+0x4>

080016b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <UsageFault_Handler+0x4>

080016be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ec:	f000 f89a 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <TIM3_IRQHandler+0x10>)
 80016fa:	f001 f939 	bl	8002970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000080 	.word	0x20000080

08001708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <SystemInit+0x20>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <SystemInit+0x20>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001764 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001732:	490e      	ldr	r1, [pc, #56]	; (800176c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001748:	4c0b      	ldr	r4, [pc, #44]	; (8001778 <LoopFillZerobss+0x26>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001756:	f7ff ffd7 	bl	8001708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175a:	f002 fff3 	bl	8004744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175e:	f7ff faa3 	bl	8000ca8 <main>
  bx  lr    
 8001762:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001764:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001770:	080049b0 	.word	0x080049b0
  ldr r2, =_sbss
 8001774:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001778:	20000124 	.word	0x20000124

0800177c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC_IRQHandler>
	...

08001780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <HAL_Init+0x40>)
 800178a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_Init+0x40>)
 8001796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HAL_Init+0x40>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f92b 	bl	8001a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	200f      	movs	r0, #15
 80017b0:	f000 f808 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7ff fe88 	bl	80014c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023c00 	.word	0x40023c00

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f943 	bl	8001a6e <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f000 f90b 	bl	8001a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000010 	.word	0x20000010
 800181c:	20000018 	.word	0x20000018
 8001820:	20000014 	.word	0x20000014

08001824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000018 	.word	0x20000018
 8001848:	20000120 	.word	0x20000120

0800184c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000120 	.word	0x20000120

08001864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001880:	4013      	ands	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <__NVIC_GetPriorityGrouping+0x18>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 0307 	and.w	r3, r3, #7
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db0b      	blt.n	80018f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	4907      	ldr	r1, [pc, #28]	; (8001900 <__NVIC_EnableIRQ+0x38>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	2001      	movs	r0, #1
 80018ea:	fa00 f202 	lsl.w	r2, r0, r2
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db0a      	blt.n	800192e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	; (8001950 <__NVIC_SetPriority+0x4c>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800192c:	e00a      	b.n	8001944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4908      	ldr	r1, [pc, #32]	; (8001954 <__NVIC_SetPriority+0x50>)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3b04      	subs	r3, #4
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	440b      	add	r3, r1
 8001942:	761a      	strb	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f1c3 0307 	rsb	r3, r3, #7
 8001972:	2b04      	cmp	r3, #4
 8001974:	bf28      	it	cs
 8001976:	2304      	movcs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3304      	adds	r3, #4
 800197e:	2b06      	cmp	r3, #6
 8001980:	d902      	bls.n	8001988 <NVIC_EncodePriority+0x30>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3b03      	subs	r3, #3
 8001986:	e000      	b.n	800198a <NVIC_EncodePriority+0x32>
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	401a      	ands	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	4313      	orrs	r3, r2
         );
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d0:	d301      	bcc.n	80019d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00f      	b.n	80019f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <SysTick_Config+0x40>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019de:	210f      	movs	r1, #15
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f7ff ff8e 	bl	8001904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <SysTick_Config+0x40>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <SysTick_Config+0x40>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	e000e010 	.word	0xe000e010

08001a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff29 	bl	8001864 <__NVIC_SetPriorityGrouping>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2c:	f7ff ff3e 	bl	80018ac <__NVIC_GetPriorityGrouping>
 8001a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	f7ff ff8e 	bl	8001958 <NVIC_EncodePriority>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff5d 	bl	8001904 <__NVIC_SetPriority>
}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff31 	bl	80018c8 <__NVIC_EnableIRQ>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ffa2 	bl	80019c0 <SysTick_Config>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e159      	b.n	8001d58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	f040 8148 	bne.w	8001d52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d005      	beq.n	8001ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d130      	bne.n	8001b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b10:	2201      	movs	r2, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 0201 	and.w	r2, r3, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d017      	beq.n	8001b78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d123      	bne.n	8001bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	08da      	lsrs	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3208      	adds	r2, #8
 8001b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	220f      	movs	r2, #15
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	08da      	lsrs	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3208      	adds	r2, #8
 8001bc6:	69b9      	ldr	r1, [r7, #24]
 8001bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0203 	and.w	r2, r3, #3
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80a2 	beq.w	8001d52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b57      	ldr	r3, [pc, #348]	; (8001d70 <HAL_GPIO_Init+0x2e8>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	4a56      	ldr	r2, [pc, #344]	; (8001d70 <HAL_GPIO_Init+0x2e8>)
 8001c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1e:	4b54      	ldr	r3, [pc, #336]	; (8001d70 <HAL_GPIO_Init+0x2e8>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2a:	4a52      	ldr	r2, [pc, #328]	; (8001d74 <HAL_GPIO_Init+0x2ec>)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	3302      	adds	r3, #2
 8001c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a49      	ldr	r2, [pc, #292]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d019      	beq.n	8001c8a <HAL_GPIO_Init+0x202>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a48      	ldr	r2, [pc, #288]	; (8001d7c <HAL_GPIO_Init+0x2f4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d013      	beq.n	8001c86 <HAL_GPIO_Init+0x1fe>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a47      	ldr	r2, [pc, #284]	; (8001d80 <HAL_GPIO_Init+0x2f8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00d      	beq.n	8001c82 <HAL_GPIO_Init+0x1fa>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a46      	ldr	r2, [pc, #280]	; (8001d84 <HAL_GPIO_Init+0x2fc>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x1f6>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a45      	ldr	r2, [pc, #276]	; (8001d88 <HAL_GPIO_Init+0x300>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_GPIO_Init+0x1f2>
 8001c76:	2304      	movs	r3, #4
 8001c78:	e008      	b.n	8001c8c <HAL_GPIO_Init+0x204>
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x204>
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e004      	b.n	8001c8c <HAL_GPIO_Init+0x204>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e002      	b.n	8001c8c <HAL_GPIO_Init+0x204>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_GPIO_Init+0x204>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	f002 0203 	and.w	r2, r2, #3
 8001c92:	0092      	lsls	r2, r2, #2
 8001c94:	4093      	lsls	r3, r2
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c9c:	4935      	ldr	r1, [pc, #212]	; (8001d74 <HAL_GPIO_Init+0x2ec>)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001caa:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cce:	4a2f      	ldr	r2, [pc, #188]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf8:	4a24      	ldr	r2, [pc, #144]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cfe:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d22:	4a1a      	ldr	r2, [pc, #104]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d4c:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3301      	adds	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b0f      	cmp	r3, #15
 8001d5c:	f67f aea2 	bls.w	8001aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020400 	.word	0x40020400
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40013c00 	.word	0x40013c00

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dac:	e003      	b.n	8001db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	041a      	lsls	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	619a      	str	r2, [r3, #24]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e267      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d075      	beq.n	8001ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001de2:	4b88      	ldr	r3, [pc, #544]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d00c      	beq.n	8001e08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dee:	4b85      	ldr	r3, [pc, #532]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d112      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dfa:	4b82      	ldr	r3, [pc, #520]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e06:	d10b      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	4b7e      	ldr	r3, [pc, #504]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d05b      	beq.n	8001ecc <HAL_RCC_OscConfig+0x108>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d157      	bne.n	8001ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e242      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e28:	d106      	bne.n	8001e38 <HAL_RCC_OscConfig+0x74>
 8001e2a:	4b76      	ldr	r3, [pc, #472]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a75      	ldr	r2, [pc, #468]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e01d      	b.n	8001e74 <HAL_RCC_OscConfig+0xb0>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x98>
 8001e42:	4b70      	ldr	r3, [pc, #448]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a6f      	ldr	r2, [pc, #444]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b6d      	ldr	r3, [pc, #436]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a6c      	ldr	r2, [pc, #432]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0xb0>
 8001e5c:	4b69      	ldr	r3, [pc, #420]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a68      	ldr	r2, [pc, #416]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b66      	ldr	r3, [pc, #408]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a65      	ldr	r2, [pc, #404]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fce6 	bl	800184c <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff fce2 	bl	800184c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e207      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b5b      	ldr	r3, [pc, #364]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0xc0>
 8001ea2:	e014      	b.n	8001ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fcd2 	bl	800184c <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff fcce 	bl	800184c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e1f3      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	4b51      	ldr	r3, [pc, #324]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0xe8>
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d063      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eda:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ee6:	4b47      	ldr	r3, [pc, #284]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d11c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ef2:	4b44      	ldr	r3, [pc, #272]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d116      	bne.n	8001f2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efe:	4b41      	ldr	r3, [pc, #260]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <HAL_RCC_OscConfig+0x152>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e1c7      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4937      	ldr	r1, [pc, #220]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	e03a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f34:	4b34      	ldr	r3, [pc, #208]	; (8002008 <HAL_RCC_OscConfig+0x244>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3a:	f7ff fc87 	bl	800184c <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f42:	f7ff fc83 	bl	800184c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e1a8      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f54:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f60:	4b28      	ldr	r3, [pc, #160]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4925      	ldr	r1, [pc, #148]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
 8001f74:	e015      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f76:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_RCC_OscConfig+0x244>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fc66 	bl	800184c <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f84:	f7ff fc62 	bl	800184c <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e187      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d036      	beq.n	800201c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d016      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_RCC_OscConfig+0x248>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7ff fc46 	bl	800184c <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc4:	f7ff fc42 	bl	800184c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e167      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x200>
 8001fe2:	e01b      	b.n	800201c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_RCC_OscConfig+0x248>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7ff fc2f 	bl	800184c <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff0:	e00e      	b.n	8002010 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fc2b 	bl	800184c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d907      	bls.n	8002010 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e150      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
 8002004:	40023800 	.word	0x40023800
 8002008:	42470000 	.word	0x42470000
 800200c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002010:	4b88      	ldr	r3, [pc, #544]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1ea      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 8097 	beq.w	8002158 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202e:	4b81      	ldr	r3, [pc, #516]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10f      	bne.n	800205a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	4b7d      	ldr	r3, [pc, #500]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	4a7c      	ldr	r2, [pc, #496]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	4b7a      	ldr	r3, [pc, #488]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002056:	2301      	movs	r3, #1
 8002058:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	4b77      	ldr	r3, [pc, #476]	; (8002238 <HAL_RCC_OscConfig+0x474>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d118      	bne.n	8002098 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002066:	4b74      	ldr	r3, [pc, #464]	; (8002238 <HAL_RCC_OscConfig+0x474>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a73      	ldr	r2, [pc, #460]	; (8002238 <HAL_RCC_OscConfig+0x474>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002072:	f7ff fbeb 	bl	800184c <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7ff fbe7 	bl	800184c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e10c      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	4b6a      	ldr	r3, [pc, #424]	; (8002238 <HAL_RCC_OscConfig+0x474>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x2ea>
 80020a0:	4b64      	ldr	r3, [pc, #400]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	4a63      	ldr	r2, [pc, #396]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6713      	str	r3, [r2, #112]	; 0x70
 80020ac:	e01c      	b.n	80020e8 <HAL_RCC_OscConfig+0x324>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x30c>
 80020b6:	4b5f      	ldr	r3, [pc, #380]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ba:	4a5e      	ldr	r2, [pc, #376]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020bc:	f043 0304 	orr.w	r3, r3, #4
 80020c0:	6713      	str	r3, [r2, #112]	; 0x70
 80020c2:	4b5c      	ldr	r3, [pc, #368]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	4a5b      	ldr	r2, [pc, #364]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6713      	str	r3, [r2, #112]	; 0x70
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0x324>
 80020d0:	4b58      	ldr	r3, [pc, #352]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d4:	4a57      	ldr	r2, [pc, #348]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	6713      	str	r3, [r2, #112]	; 0x70
 80020dc:	4b55      	ldr	r3, [pc, #340]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e0:	4a54      	ldr	r2, [pc, #336]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020e2:	f023 0304 	bic.w	r3, r3, #4
 80020e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d015      	beq.n	800211c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f0:	f7ff fbac 	bl	800184c <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f6:	e00a      	b.n	800210e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f8:	f7ff fba8 	bl	800184c <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	; 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e0cb      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210e:	4b49      	ldr	r3, [pc, #292]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0ee      	beq.n	80020f8 <HAL_RCC_OscConfig+0x334>
 800211a:	e014      	b.n	8002146 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211c:	f7ff fb96 	bl	800184c <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002122:	e00a      	b.n	800213a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7ff fb92 	bl	800184c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e0b5      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213a:	4b3e      	ldr	r3, [pc, #248]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1ee      	bne.n	8002124 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002146:	7dfb      	ldrb	r3, [r7, #23]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d105      	bne.n	8002158 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214c:	4b39      	ldr	r3, [pc, #228]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	4a38      	ldr	r2, [pc, #224]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002156:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80a1 	beq.w	80022a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002162:	4b34      	ldr	r3, [pc, #208]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b08      	cmp	r3, #8
 800216c:	d05c      	beq.n	8002228 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d141      	bne.n	80021fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002176:	4b31      	ldr	r3, [pc, #196]	; (800223c <HAL_RCC_OscConfig+0x478>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff fb66 	bl	800184c <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002184:	f7ff fb62 	bl	800184c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e087      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002196:	4b27      	ldr	r3, [pc, #156]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69da      	ldr	r2, [r3, #28]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	019b      	lsls	r3, r3, #6
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	085b      	lsrs	r3, r3, #1
 80021ba:	3b01      	subs	r3, #1
 80021bc:	041b      	lsls	r3, r3, #16
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	061b      	lsls	r3, r3, #24
 80021c6:	491b      	ldr	r1, [pc, #108]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_RCC_OscConfig+0x478>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7ff fb3b 	bl	800184c <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021da:	f7ff fb37 	bl	800184c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e05c      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x416>
 80021f8:	e054      	b.n	80022a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_RCC_OscConfig+0x478>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7ff fb24 	bl	800184c <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002208:	f7ff fb20 	bl	800184c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e045      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x444>
 8002226:	e03d      	b.n	80022a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e038      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
 8002234:	40023800 	.word	0x40023800
 8002238:	40007000 	.word	0x40007000
 800223c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002240:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <HAL_RCC_OscConfig+0x4ec>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d028      	beq.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d121      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d11a      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002270:	4013      	ands	r3, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002276:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002278:	4293      	cmp	r3, r2
 800227a:	d111      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	085b      	lsrs	r3, r3, #1
 8002288:	3b01      	subs	r3, #1
 800228a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d107      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800

080022b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0cc      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4b68      	ldr	r3, [pc, #416]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d90c      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b65      	ldr	r3, [pc, #404]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b63      	ldr	r3, [pc, #396]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0b8      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d020      	beq.n	800233e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002308:	4b59      	ldr	r3, [pc, #356]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4a58      	ldr	r2, [pc, #352]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002312:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002320:	4b53      	ldr	r3, [pc, #332]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4a52      	ldr	r2, [pc, #328]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800232a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232c:	4b50      	ldr	r3, [pc, #320]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	494d      	ldr	r1, [pc, #308]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d044      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d107      	bne.n	8002362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d119      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e07f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d003      	beq.n	8002372 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236e:	2b03      	cmp	r3, #3
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002372:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e06f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002382:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e067      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002392:	4b37      	ldr	r3, [pc, #220]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f023 0203 	bic.w	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4934      	ldr	r1, [pc, #208]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a4:	f7ff fa52 	bl	800184c <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ac:	f7ff fa4e 	bl	800184c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e04f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 020c 	and.w	r2, r3, #12
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d1eb      	bne.n	80023ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d4:	4b25      	ldr	r3, [pc, #148]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d20c      	bcs.n	80023fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e032      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4916      	ldr	r1, [pc, #88]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	490e      	ldr	r1, [pc, #56]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800243a:	f000 f821 	bl	8002480 <HAL_RCC_GetSysClockFreq>
 800243e:	4602      	mov	r2, r0
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	490a      	ldr	r1, [pc, #40]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	5ccb      	ldrb	r3, [r1, r3]
 800244e:	fa22 f303 	lsr.w	r3, r2, r3
 8002452:	4a09      	ldr	r2, [pc, #36]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_RCC_ClockConfig+0x1c8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff f9b2 	bl	80017c4 <HAL_InitTick>

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40023c00 	.word	0x40023c00
 8002470:	40023800 	.word	0x40023800
 8002474:	080047b8 	.word	0x080047b8
 8002478:	20000010 	.word	0x20000010
 800247c:	20000014 	.word	0x20000014

08002480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002484:	b090      	sub	sp, #64	; 0x40
 8002486:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	637b      	str	r3, [r7, #52]	; 0x34
 800248c:	2300      	movs	r3, #0
 800248e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002490:	2300      	movs	r3, #0
 8002492:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002498:	4b59      	ldr	r3, [pc, #356]	; (8002600 <HAL_RCC_GetSysClockFreq+0x180>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d00d      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0x40>
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	f200 80a1 	bhi.w	80025ec <HAL_RCC_GetSysClockFreq+0x16c>
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_RCC_GetSysClockFreq+0x34>
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d003      	beq.n	80024ba <HAL_RCC_GetSysClockFreq+0x3a>
 80024b2:	e09b      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024b4:	4b53      	ldr	r3, [pc, #332]	; (8002604 <HAL_RCC_GetSysClockFreq+0x184>)
 80024b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80024b8:	e09b      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ba:	4b53      	ldr	r3, [pc, #332]	; (8002608 <HAL_RCC_GetSysClockFreq+0x188>)
 80024bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024be:	e098      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024c0:	4b4f      	ldr	r3, [pc, #316]	; (8002600 <HAL_RCC_GetSysClockFreq+0x180>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ca:	4b4d      	ldr	r3, [pc, #308]	; (8002600 <HAL_RCC_GetSysClockFreq+0x180>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d028      	beq.n	8002528 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d6:	4b4a      	ldr	r3, [pc, #296]	; (8002600 <HAL_RCC_GetSysClockFreq+0x180>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	099b      	lsrs	r3, r3, #6
 80024dc:	2200      	movs	r2, #0
 80024de:	623b      	str	r3, [r7, #32]
 80024e0:	627a      	str	r2, [r7, #36]	; 0x24
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024e8:	2100      	movs	r1, #0
 80024ea:	4b47      	ldr	r3, [pc, #284]	; (8002608 <HAL_RCC_GetSysClockFreq+0x188>)
 80024ec:	fb03 f201 	mul.w	r2, r3, r1
 80024f0:	2300      	movs	r3, #0
 80024f2:	fb00 f303 	mul.w	r3, r0, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	4a43      	ldr	r2, [pc, #268]	; (8002608 <HAL_RCC_GetSysClockFreq+0x188>)
 80024fa:	fba0 1202 	umull	r1, r2, r0, r2
 80024fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002500:	460a      	mov	r2, r1
 8002502:	62ba      	str	r2, [r7, #40]	; 0x28
 8002504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002506:	4413      	add	r3, r2
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800250a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250c:	2200      	movs	r2, #0
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	61fa      	str	r2, [r7, #28]
 8002512:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002516:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800251a:	f7fe fa43 	bl	80009a4 <__aeabi_uldivmod>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4613      	mov	r3, r2
 8002524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002526:	e053      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002528:	4b35      	ldr	r3, [pc, #212]	; (8002600 <HAL_RCC_GetSysClockFreq+0x180>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	099b      	lsrs	r3, r3, #6
 800252e:	2200      	movs	r2, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	617a      	str	r2, [r7, #20]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800253a:	f04f 0b00 	mov.w	fp, #0
 800253e:	4652      	mov	r2, sl
 8002540:	465b      	mov	r3, fp
 8002542:	f04f 0000 	mov.w	r0, #0
 8002546:	f04f 0100 	mov.w	r1, #0
 800254a:	0159      	lsls	r1, r3, #5
 800254c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002550:	0150      	lsls	r0, r2, #5
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	ebb2 080a 	subs.w	r8, r2, sl
 800255a:	eb63 090b 	sbc.w	r9, r3, fp
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800256a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800256e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002572:	ebb2 0408 	subs.w	r4, r2, r8
 8002576:	eb63 0509 	sbc.w	r5, r3, r9
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	00eb      	lsls	r3, r5, #3
 8002584:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002588:	00e2      	lsls	r2, r4, #3
 800258a:	4614      	mov	r4, r2
 800258c:	461d      	mov	r5, r3
 800258e:	eb14 030a 	adds.w	r3, r4, sl
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	eb45 030b 	adc.w	r3, r5, fp
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025a6:	4629      	mov	r1, r5
 80025a8:	028b      	lsls	r3, r1, #10
 80025aa:	4621      	mov	r1, r4
 80025ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025b0:	4621      	mov	r1, r4
 80025b2:	028a      	lsls	r2, r1, #10
 80025b4:	4610      	mov	r0, r2
 80025b6:	4619      	mov	r1, r3
 80025b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ba:	2200      	movs	r2, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	60fa      	str	r2, [r7, #12]
 80025c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025c4:	f7fe f9ee 	bl	80009a4 <__aeabi_uldivmod>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4613      	mov	r3, r2
 80025ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_GetSysClockFreq+0x180>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	0c1b      	lsrs	r3, r3, #16
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	3301      	adds	r3, #1
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80025e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025ea:	e002      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_RCC_GetSysClockFreq+0x184>)
 80025ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3740      	adds	r7, #64	; 0x40
 80025f8:	46bd      	mov	sp, r7
 80025fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800
 8002604:	00f42400 	.word	0x00f42400
 8002608:	017d7840 	.word	0x017d7840

0800260c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e041      	b.n	80026a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe ff92 	bl	800155c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3304      	adds	r3, #4
 8002648:	4619      	mov	r1, r3
 800264a:	4610      	mov	r0, r2
 800264c:	f000 fc4a 	bl	8002ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d001      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e044      	b.n	800274e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a1e      	ldr	r2, [pc, #120]	; (800275c <HAL_TIM_Base_Start_IT+0xb0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d018      	beq.n	8002718 <HAL_TIM_Base_Start_IT+0x6c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ee:	d013      	beq.n	8002718 <HAL_TIM_Base_Start_IT+0x6c>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1a      	ldr	r2, [pc, #104]	; (8002760 <HAL_TIM_Base_Start_IT+0xb4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00e      	beq.n	8002718 <HAL_TIM_Base_Start_IT+0x6c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a19      	ldr	r2, [pc, #100]	; (8002764 <HAL_TIM_Base_Start_IT+0xb8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d009      	beq.n	8002718 <HAL_TIM_Base_Start_IT+0x6c>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_TIM_Base_Start_IT+0xbc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d004      	beq.n	8002718 <HAL_TIM_Base_Start_IT+0x6c>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a16      	ldr	r2, [pc, #88]	; (800276c <HAL_TIM_Base_Start_IT+0xc0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d111      	bne.n	800273c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b06      	cmp	r3, #6
 8002728:	d010      	beq.n	800274c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0201 	orr.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273a:	e007      	b.n	800274c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40010000 	.word	0x40010000
 8002760:	40000400 	.word	0x40000400
 8002764:	40000800 	.word	0x40000800
 8002768:	40000c00 	.word	0x40000c00
 800276c:	40014000 	.word	0x40014000

08002770 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e041      	b.n	8002806 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe febe 	bl	8001518 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3304      	adds	r3, #4
 80027ac:	4619      	mov	r1, r3
 80027ae:	4610      	mov	r0, r2
 80027b0:	f000 fb98 	bl	8002ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <HAL_TIM_PWM_Start+0x24>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	bf14      	ite	ne
 800282c:	2301      	movne	r3, #1
 800282e:	2300      	moveq	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	e022      	b.n	800287a <HAL_TIM_PWM_Start+0x6a>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2b04      	cmp	r3, #4
 8002838:	d109      	bne.n	800284e <HAL_TIM_PWM_Start+0x3e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b01      	cmp	r3, #1
 8002844:	bf14      	ite	ne
 8002846:	2301      	movne	r3, #1
 8002848:	2300      	moveq	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	e015      	b.n	800287a <HAL_TIM_PWM_Start+0x6a>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d109      	bne.n	8002868 <HAL_TIM_PWM_Start+0x58>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b01      	cmp	r3, #1
 800285e:	bf14      	ite	ne
 8002860:	2301      	movne	r3, #1
 8002862:	2300      	moveq	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	e008      	b.n	800287a <HAL_TIM_PWM_Start+0x6a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	bf14      	ite	ne
 8002874:	2301      	movne	r3, #1
 8002876:	2300      	moveq	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e068      	b.n	8002954 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d104      	bne.n	8002892 <HAL_TIM_PWM_Start+0x82>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002890:	e013      	b.n	80028ba <HAL_TIM_PWM_Start+0xaa>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d104      	bne.n	80028a2 <HAL_TIM_PWM_Start+0x92>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a0:	e00b      	b.n	80028ba <HAL_TIM_PWM_Start+0xaa>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d104      	bne.n	80028b2 <HAL_TIM_PWM_Start+0xa2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b0:	e003      	b.n	80028ba <HAL_TIM_PWM_Start+0xaa>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2202      	movs	r2, #2
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2201      	movs	r2, #1
 80028c0:	6839      	ldr	r1, [r7, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 fdb4 	bl	8003430 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a23      	ldr	r2, [pc, #140]	; (800295c <HAL_TIM_PWM_Start+0x14c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d107      	bne.n	80028e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1d      	ldr	r2, [pc, #116]	; (800295c <HAL_TIM_PWM_Start+0x14c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d018      	beq.n	800291e <HAL_TIM_PWM_Start+0x10e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f4:	d013      	beq.n	800291e <HAL_TIM_PWM_Start+0x10e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a19      	ldr	r2, [pc, #100]	; (8002960 <HAL_TIM_PWM_Start+0x150>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00e      	beq.n	800291e <HAL_TIM_PWM_Start+0x10e>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a17      	ldr	r2, [pc, #92]	; (8002964 <HAL_TIM_PWM_Start+0x154>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d009      	beq.n	800291e <HAL_TIM_PWM_Start+0x10e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a16      	ldr	r2, [pc, #88]	; (8002968 <HAL_TIM_PWM_Start+0x158>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d004      	beq.n	800291e <HAL_TIM_PWM_Start+0x10e>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a14      	ldr	r2, [pc, #80]	; (800296c <HAL_TIM_PWM_Start+0x15c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d111      	bne.n	8002942 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b06      	cmp	r3, #6
 800292e:	d010      	beq.n	8002952 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002940:	e007      	b.n	8002952 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40010000 	.word	0x40010000
 8002960:	40000400 	.word	0x40000400
 8002964:	40000800 	.word	0x40000800
 8002968:	40000c00 	.word	0x40000c00
 800296c:	40014000 	.word	0x40014000

08002970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b02      	cmp	r3, #2
 8002984:	d122      	bne.n	80029cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b02      	cmp	r3, #2
 8002992:	d11b      	bne.n	80029cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0202 	mvn.w	r2, #2
 800299c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fa77 	bl	8002ea6 <HAL_TIM_IC_CaptureCallback>
 80029b8:	e005      	b.n	80029c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fa69 	bl	8002e92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fa7a 	bl	8002eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d122      	bne.n	8002a20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d11b      	bne.n	8002a20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0204 	mvn.w	r2, #4
 80029f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2202      	movs	r2, #2
 80029f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fa4d 	bl	8002ea6 <HAL_TIM_IC_CaptureCallback>
 8002a0c:	e005      	b.n	8002a1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fa3f 	bl	8002e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fa50 	bl	8002eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d122      	bne.n	8002a74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d11b      	bne.n	8002a74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0208 	mvn.w	r2, #8
 8002a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2204      	movs	r2, #4
 8002a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fa23 	bl	8002ea6 <HAL_TIM_IC_CaptureCallback>
 8002a60:	e005      	b.n	8002a6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa15 	bl	8002e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 fa26 	bl	8002eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b10      	cmp	r3, #16
 8002a80:	d122      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b10      	cmp	r3, #16
 8002a8e:	d11b      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0210 	mvn.w	r2, #16
 8002a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f9f9 	bl	8002ea6 <HAL_TIM_IC_CaptureCallback>
 8002ab4:	e005      	b.n	8002ac2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f9eb 	bl	8002e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f9fc 	bl	8002eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d10e      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d107      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0201 	mvn.w	r2, #1
 8002aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fe fb3a 	bl	8001168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afe:	2b80      	cmp	r3, #128	; 0x80
 8002b00:	d10e      	bne.n	8002b20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0c:	2b80      	cmp	r3, #128	; 0x80
 8002b0e:	d107      	bne.n	8002b20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fd78 	bl	8003610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b40      	cmp	r3, #64	; 0x40
 8002b2c:	d10e      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	d107      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f9c1 	bl	8002ece <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d10e      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d107      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0220 	mvn.w	r2, #32
 8002b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fd42 	bl	80035fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e0ae      	b.n	8002cfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	f200 809f 	bhi.w	8002cec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bae:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb4:	08002be9 	.word	0x08002be9
 8002bb8:	08002ced 	.word	0x08002ced
 8002bbc:	08002ced 	.word	0x08002ced
 8002bc0:	08002ced 	.word	0x08002ced
 8002bc4:	08002c29 	.word	0x08002c29
 8002bc8:	08002ced 	.word	0x08002ced
 8002bcc:	08002ced 	.word	0x08002ced
 8002bd0:	08002ced 	.word	0x08002ced
 8002bd4:	08002c6b 	.word	0x08002c6b
 8002bd8:	08002ced 	.word	0x08002ced
 8002bdc:	08002ced 	.word	0x08002ced
 8002be0:	08002ced 	.word	0x08002ced
 8002be4:	08002cab 	.word	0x08002cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f9f8 	bl	8002fe4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0208 	orr.w	r2, r2, #8
 8002c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0204 	bic.w	r2, r2, #4
 8002c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6999      	ldr	r1, [r3, #24]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	619a      	str	r2, [r3, #24]
      break;
 8002c26:	e064      	b.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fa3e 	bl	80030b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6999      	ldr	r1, [r3, #24]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	021a      	lsls	r2, r3, #8
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	619a      	str	r2, [r3, #24]
      break;
 8002c68:	e043      	b.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fa89 	bl	8003188 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0208 	orr.w	r2, r2, #8
 8002c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0204 	bic.w	r2, r2, #4
 8002c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69d9      	ldr	r1, [r3, #28]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	61da      	str	r2, [r3, #28]
      break;
 8002ca8:	e023      	b.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fad3 	bl	800325c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69da      	ldr	r2, [r3, #28]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69d9      	ldr	r1, [r3, #28]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	021a      	lsls	r2, r3, #8
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	61da      	str	r2, [r3, #28]
      break;
 8002cea:	e002      	b.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	75fb      	strb	r3, [r7, #23]
      break;
 8002cf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_TIM_ConfigClockSource+0x1c>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e0b4      	b.n	8002e8a <HAL_TIM_ConfigClockSource+0x186>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d58:	d03e      	beq.n	8002dd8 <HAL_TIM_ConfigClockSource+0xd4>
 8002d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d5e:	f200 8087 	bhi.w	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
 8002d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d66:	f000 8086 	beq.w	8002e76 <HAL_TIM_ConfigClockSource+0x172>
 8002d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6e:	d87f      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
 8002d70:	2b70      	cmp	r3, #112	; 0x70
 8002d72:	d01a      	beq.n	8002daa <HAL_TIM_ConfigClockSource+0xa6>
 8002d74:	2b70      	cmp	r3, #112	; 0x70
 8002d76:	d87b      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
 8002d78:	2b60      	cmp	r3, #96	; 0x60
 8002d7a:	d050      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0x11a>
 8002d7c:	2b60      	cmp	r3, #96	; 0x60
 8002d7e:	d877      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
 8002d80:	2b50      	cmp	r3, #80	; 0x50
 8002d82:	d03c      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0xfa>
 8002d84:	2b50      	cmp	r3, #80	; 0x50
 8002d86:	d873      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
 8002d88:	2b40      	cmp	r3, #64	; 0x40
 8002d8a:	d058      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x13a>
 8002d8c:	2b40      	cmp	r3, #64	; 0x40
 8002d8e:	d86f      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
 8002d90:	2b30      	cmp	r3, #48	; 0x30
 8002d92:	d064      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x15a>
 8002d94:	2b30      	cmp	r3, #48	; 0x30
 8002d96:	d86b      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d060      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x15a>
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d867      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d05c      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x15a>
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d05a      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x15a>
 8002da8:	e062      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6899      	ldr	r1, [r3, #8]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f000 fb19 	bl	80033f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	609a      	str	r2, [r3, #8]
      break;
 8002dd6:	e04f      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	6899      	ldr	r1, [r3, #8]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f000 fb02 	bl	80033f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dfa:	609a      	str	r2, [r3, #8]
      break;
 8002dfc:	e03c      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6859      	ldr	r1, [r3, #4]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f000 fa76 	bl	80032fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2150      	movs	r1, #80	; 0x50
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 facf 	bl	80033ba <TIM_ITRx_SetConfig>
      break;
 8002e1c:	e02c      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6859      	ldr	r1, [r3, #4]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f000 fa95 	bl	800335a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2160      	movs	r1, #96	; 0x60
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fabf 	bl	80033ba <TIM_ITRx_SetConfig>
      break;
 8002e3c:	e01c      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6859      	ldr	r1, [r3, #4]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f000 fa56 	bl	80032fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2140      	movs	r1, #64	; 0x40
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 faaf 	bl	80033ba <TIM_ITRx_SetConfig>
      break;
 8002e5c:	e00c      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4619      	mov	r1, r3
 8002e68:	4610      	mov	r0, r2
 8002e6a:	f000 faa6 	bl	80033ba <TIM_ITRx_SetConfig>
      break;
 8002e6e:	e003      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      break;
 8002e74:	e000      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a34      	ldr	r2, [pc, #208]	; (8002fc8 <TIM_Base_SetConfig+0xe4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00f      	beq.n	8002f1c <TIM_Base_SetConfig+0x38>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f02:	d00b      	beq.n	8002f1c <TIM_Base_SetConfig+0x38>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a31      	ldr	r2, [pc, #196]	; (8002fcc <TIM_Base_SetConfig+0xe8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d007      	beq.n	8002f1c <TIM_Base_SetConfig+0x38>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a30      	ldr	r2, [pc, #192]	; (8002fd0 <TIM_Base_SetConfig+0xec>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d003      	beq.n	8002f1c <TIM_Base_SetConfig+0x38>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a2f      	ldr	r2, [pc, #188]	; (8002fd4 <TIM_Base_SetConfig+0xf0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d108      	bne.n	8002f2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a25      	ldr	r2, [pc, #148]	; (8002fc8 <TIM_Base_SetConfig+0xe4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01b      	beq.n	8002f6e <TIM_Base_SetConfig+0x8a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3c:	d017      	beq.n	8002f6e <TIM_Base_SetConfig+0x8a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a22      	ldr	r2, [pc, #136]	; (8002fcc <TIM_Base_SetConfig+0xe8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d013      	beq.n	8002f6e <TIM_Base_SetConfig+0x8a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a21      	ldr	r2, [pc, #132]	; (8002fd0 <TIM_Base_SetConfig+0xec>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00f      	beq.n	8002f6e <TIM_Base_SetConfig+0x8a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a20      	ldr	r2, [pc, #128]	; (8002fd4 <TIM_Base_SetConfig+0xf0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00b      	beq.n	8002f6e <TIM_Base_SetConfig+0x8a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a1f      	ldr	r2, [pc, #124]	; (8002fd8 <TIM_Base_SetConfig+0xf4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d007      	beq.n	8002f6e <TIM_Base_SetConfig+0x8a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1e      	ldr	r2, [pc, #120]	; (8002fdc <TIM_Base_SetConfig+0xf8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d003      	beq.n	8002f6e <TIM_Base_SetConfig+0x8a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <TIM_Base_SetConfig+0xfc>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d108      	bne.n	8002f80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a08      	ldr	r2, [pc, #32]	; (8002fc8 <TIM_Base_SetConfig+0xe4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d103      	bne.n	8002fb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	615a      	str	r2, [r3, #20]
}
 8002fba:	bf00      	nop
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40010000 	.word	0x40010000
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800
 8002fd4:	40000c00 	.word	0x40000c00
 8002fd8:	40014000 	.word	0x40014000
 8002fdc:	40014400 	.word	0x40014400
 8002fe0:	40014800 	.word	0x40014800

08002fe4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	f023 0201 	bic.w	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0303 	bic.w	r3, r3, #3
 800301a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f023 0302 	bic.w	r3, r3, #2
 800302c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a1c      	ldr	r2, [pc, #112]	; (80030ac <TIM_OC1_SetConfig+0xc8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10c      	bne.n	800305a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f023 0308 	bic.w	r3, r3, #8
 8003046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f023 0304 	bic.w	r3, r3, #4
 8003058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a13      	ldr	r2, [pc, #76]	; (80030ac <TIM_OC1_SetConfig+0xc8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d111      	bne.n	8003086 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	621a      	str	r2, [r3, #32]
}
 80030a0:	bf00      	nop
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	40010000 	.word	0x40010000

080030b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	f023 0210 	bic.w	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f023 0320 	bic.w	r3, r3, #32
 80030fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a1e      	ldr	r2, [pc, #120]	; (8003184 <TIM_OC2_SetConfig+0xd4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d10d      	bne.n	800312c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800312a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a15      	ldr	r2, [pc, #84]	; (8003184 <TIM_OC2_SetConfig+0xd4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d113      	bne.n	800315c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800313a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003142:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	621a      	str	r2, [r3, #32]
}
 8003176:	bf00      	nop
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40010000 	.word	0x40010000

08003188 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0303 	bic.w	r3, r3, #3
 80031be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a1d      	ldr	r2, [pc, #116]	; (8003258 <TIM_OC3_SetConfig+0xd0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d10d      	bne.n	8003202 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a14      	ldr	r2, [pc, #80]	; (8003258 <TIM_OC3_SetConfig+0xd0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d113      	bne.n	8003232 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	621a      	str	r2, [r3, #32]
}
 800324c:	bf00      	nop
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40010000 	.word	0x40010000

0800325c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800328a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	021b      	lsls	r3, r3, #8
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	031b      	lsls	r3, r3, #12
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a10      	ldr	r2, [pc, #64]	; (80032f8 <TIM_OC4_SetConfig+0x9c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d109      	bne.n	80032d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	019b      	lsls	r3, r3, #6
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	621a      	str	r2, [r3, #32]
}
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40010000 	.word	0x40010000

080032fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	f023 0201 	bic.w	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f023 030a 	bic.w	r3, r3, #10
 8003338:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	621a      	str	r2, [r3, #32]
}
 800334e:	bf00      	nop
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800335a:	b480      	push	{r7}
 800335c:	b087      	sub	sp, #28
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f023 0210 	bic.w	r2, r3, #16
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003384:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	031b      	lsls	r3, r3, #12
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003396:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	621a      	str	r2, [r3, #32]
}
 80033ae:	bf00      	nop
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b085      	sub	sp, #20
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f043 0307 	orr.w	r3, r3, #7
 80033dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	609a      	str	r2, [r3, #8]
}
 80033e4:	bf00      	nop
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800340a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	021a      	lsls	r2, r3, #8
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	431a      	orrs	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	4313      	orrs	r3, r2
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	609a      	str	r2, [r3, #8]
}
 8003424:	bf00      	nop
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2201      	movs	r2, #1
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a1a      	ldr	r2, [r3, #32]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	43db      	mvns	r3, r3
 8003452:	401a      	ands	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a1a      	ldr	r2, [r3, #32]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	431a      	orrs	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	621a      	str	r2, [r3, #32]
}
 800346e:	bf00      	nop
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003490:	2302      	movs	r3, #2
 8003492:	e050      	b.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1c      	ldr	r2, [pc, #112]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e0:	d013      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a18      	ldr	r2, [pc, #96]	; (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a16      	ldr	r2, [pc, #88]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a15      	ldr	r2, [pc, #84]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a13      	ldr	r2, [pc, #76]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10c      	bne.n	8003524 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	4313      	orrs	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40010000 	.word	0x40010000
 8003548:	40000400 	.word	0x40000400
 800354c:	40000800 	.word	0x40000800
 8003550:	40000c00 	.word	0x40000c00
 8003554:	40014000 	.word	0x40014000

08003558 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003570:	2302      	movs	r3, #2
 8003572:	e03d      	b.n	80035f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <round>:
 8003624:	ec51 0b10 	vmov	r0, r1, d0
 8003628:	b570      	push	{r4, r5, r6, lr}
 800362a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800362e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8003632:	2c13      	cmp	r4, #19
 8003634:	ee10 2a10 	vmov	r2, s0
 8003638:	460b      	mov	r3, r1
 800363a:	dc19      	bgt.n	8003670 <round+0x4c>
 800363c:	2c00      	cmp	r4, #0
 800363e:	da09      	bge.n	8003654 <round+0x30>
 8003640:	3401      	adds	r4, #1
 8003642:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8003646:	d103      	bne.n	8003650 <round+0x2c>
 8003648:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800364c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003650:	2200      	movs	r2, #0
 8003652:	e028      	b.n	80036a6 <round+0x82>
 8003654:	4d15      	ldr	r5, [pc, #84]	; (80036ac <round+0x88>)
 8003656:	4125      	asrs	r5, r4
 8003658:	ea01 0605 	and.w	r6, r1, r5
 800365c:	4332      	orrs	r2, r6
 800365e:	d00e      	beq.n	800367e <round+0x5a>
 8003660:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003664:	fa42 f404 	asr.w	r4, r2, r4
 8003668:	4423      	add	r3, r4
 800366a:	ea23 0305 	bic.w	r3, r3, r5
 800366e:	e7ef      	b.n	8003650 <round+0x2c>
 8003670:	2c33      	cmp	r4, #51	; 0x33
 8003672:	dd07      	ble.n	8003684 <round+0x60>
 8003674:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003678:	d101      	bne.n	800367e <round+0x5a>
 800367a:	f7fc fedd 	bl	8000438 <__adddf3>
 800367e:	ec41 0b10 	vmov	d0, r0, r1
 8003682:	bd70      	pop	{r4, r5, r6, pc}
 8003684:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8003688:	f04f 35ff 	mov.w	r5, #4294967295
 800368c:	40f5      	lsrs	r5, r6
 800368e:	4228      	tst	r0, r5
 8003690:	d0f5      	beq.n	800367e <round+0x5a>
 8003692:	2101      	movs	r1, #1
 8003694:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8003698:	fa01 f404 	lsl.w	r4, r1, r4
 800369c:	1912      	adds	r2, r2, r4
 800369e:	bf28      	it	cs
 80036a0:	185b      	addcs	r3, r3, r1
 80036a2:	ea22 0205 	bic.w	r2, r2, r5
 80036a6:	4619      	mov	r1, r3
 80036a8:	4610      	mov	r0, r2
 80036aa:	e7e8      	b.n	800367e <round+0x5a>
 80036ac:	000fffff 	.word	0x000fffff

080036b0 <sin>:
 80036b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80036b2:	ec53 2b10 	vmov	r2, r3, d0
 80036b6:	4828      	ldr	r0, [pc, #160]	; (8003758 <sin+0xa8>)
 80036b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80036bc:	4281      	cmp	r1, r0
 80036be:	dc07      	bgt.n	80036d0 <sin+0x20>
 80036c0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003750 <sin+0xa0>
 80036c4:	2000      	movs	r0, #0
 80036c6:	b005      	add	sp, #20
 80036c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80036cc:	f000 be6c 	b.w	80043a8 <__kernel_sin>
 80036d0:	4822      	ldr	r0, [pc, #136]	; (800375c <sin+0xac>)
 80036d2:	4281      	cmp	r1, r0
 80036d4:	dd09      	ble.n	80036ea <sin+0x3a>
 80036d6:	ee10 0a10 	vmov	r0, s0
 80036da:	4619      	mov	r1, r3
 80036dc:	f7fc feaa 	bl	8000434 <__aeabi_dsub>
 80036e0:	ec41 0b10 	vmov	d0, r0, r1
 80036e4:	b005      	add	sp, #20
 80036e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80036ea:	4668      	mov	r0, sp
 80036ec:	f000 f838 	bl	8003760 <__ieee754_rem_pio2>
 80036f0:	f000 0003 	and.w	r0, r0, #3
 80036f4:	2801      	cmp	r0, #1
 80036f6:	d00c      	beq.n	8003712 <sin+0x62>
 80036f8:	2802      	cmp	r0, #2
 80036fa:	d011      	beq.n	8003720 <sin+0x70>
 80036fc:	b9f0      	cbnz	r0, 800373c <sin+0x8c>
 80036fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003702:	ed9d 0b00 	vldr	d0, [sp]
 8003706:	2001      	movs	r0, #1
 8003708:	f000 fe4e 	bl	80043a8 <__kernel_sin>
 800370c:	ec51 0b10 	vmov	r0, r1, d0
 8003710:	e7e6      	b.n	80036e0 <sin+0x30>
 8003712:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003716:	ed9d 0b00 	vldr	d0, [sp]
 800371a:	f000 fa2d 	bl	8003b78 <__kernel_cos>
 800371e:	e7f5      	b.n	800370c <sin+0x5c>
 8003720:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003724:	ed9d 0b00 	vldr	d0, [sp]
 8003728:	2001      	movs	r0, #1
 800372a:	f000 fe3d 	bl	80043a8 <__kernel_sin>
 800372e:	ec53 2b10 	vmov	r2, r3, d0
 8003732:	ee10 0a10 	vmov	r0, s0
 8003736:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800373a:	e7d1      	b.n	80036e0 <sin+0x30>
 800373c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003740:	ed9d 0b00 	vldr	d0, [sp]
 8003744:	f000 fa18 	bl	8003b78 <__kernel_cos>
 8003748:	e7f1      	b.n	800372e <sin+0x7e>
 800374a:	bf00      	nop
 800374c:	f3af 8000 	nop.w
	...
 8003758:	3fe921fb 	.word	0x3fe921fb
 800375c:	7fefffff 	.word	0x7fefffff

08003760 <__ieee754_rem_pio2>:
 8003760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003764:	ed2d 8b02 	vpush	{d8}
 8003768:	ec55 4b10 	vmov	r4, r5, d0
 800376c:	4bca      	ldr	r3, [pc, #808]	; (8003a98 <__ieee754_rem_pio2+0x338>)
 800376e:	b08b      	sub	sp, #44	; 0x2c
 8003770:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003774:	4598      	cmp	r8, r3
 8003776:	4682      	mov	sl, r0
 8003778:	9502      	str	r5, [sp, #8]
 800377a:	dc08      	bgt.n	800378e <__ieee754_rem_pio2+0x2e>
 800377c:	2200      	movs	r2, #0
 800377e:	2300      	movs	r3, #0
 8003780:	ed80 0b00 	vstr	d0, [r0]
 8003784:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003788:	f04f 0b00 	mov.w	fp, #0
 800378c:	e028      	b.n	80037e0 <__ieee754_rem_pio2+0x80>
 800378e:	4bc3      	ldr	r3, [pc, #780]	; (8003a9c <__ieee754_rem_pio2+0x33c>)
 8003790:	4598      	cmp	r8, r3
 8003792:	dc78      	bgt.n	8003886 <__ieee754_rem_pio2+0x126>
 8003794:	9b02      	ldr	r3, [sp, #8]
 8003796:	4ec2      	ldr	r6, [pc, #776]	; (8003aa0 <__ieee754_rem_pio2+0x340>)
 8003798:	2b00      	cmp	r3, #0
 800379a:	ee10 0a10 	vmov	r0, s0
 800379e:	a3b0      	add	r3, pc, #704	; (adr r3, 8003a60 <__ieee754_rem_pio2+0x300>)
 80037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a4:	4629      	mov	r1, r5
 80037a6:	dd39      	ble.n	800381c <__ieee754_rem_pio2+0xbc>
 80037a8:	f7fc fe44 	bl	8000434 <__aeabi_dsub>
 80037ac:	45b0      	cmp	r8, r6
 80037ae:	4604      	mov	r4, r0
 80037b0:	460d      	mov	r5, r1
 80037b2:	d01b      	beq.n	80037ec <__ieee754_rem_pio2+0x8c>
 80037b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8003a68 <__ieee754_rem_pio2+0x308>)
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f7fc fe3b 	bl	8000434 <__aeabi_dsub>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	e9ca 2300 	strd	r2, r3, [sl]
 80037c6:	4620      	mov	r0, r4
 80037c8:	4629      	mov	r1, r5
 80037ca:	f7fc fe33 	bl	8000434 <__aeabi_dsub>
 80037ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8003a68 <__ieee754_rem_pio2+0x308>)
 80037d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d4:	f7fc fe2e 	bl	8000434 <__aeabi_dsub>
 80037d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80037dc:	f04f 0b01 	mov.w	fp, #1
 80037e0:	4658      	mov	r0, fp
 80037e2:	b00b      	add	sp, #44	; 0x2c
 80037e4:	ecbd 8b02 	vpop	{d8}
 80037e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8003a70 <__ieee754_rem_pio2+0x310>)
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	f7fc fe1f 	bl	8000434 <__aeabi_dsub>
 80037f6:	a3a0      	add	r3, pc, #640	; (adr r3, 8003a78 <__ieee754_rem_pio2+0x318>)
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	4604      	mov	r4, r0
 80037fe:	460d      	mov	r5, r1
 8003800:	f7fc fe18 	bl	8000434 <__aeabi_dsub>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	e9ca 2300 	strd	r2, r3, [sl]
 800380c:	4620      	mov	r0, r4
 800380e:	4629      	mov	r1, r5
 8003810:	f7fc fe10 	bl	8000434 <__aeabi_dsub>
 8003814:	a398      	add	r3, pc, #608	; (adr r3, 8003a78 <__ieee754_rem_pio2+0x318>)
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381a:	e7db      	b.n	80037d4 <__ieee754_rem_pio2+0x74>
 800381c:	f7fc fe0c 	bl	8000438 <__adddf3>
 8003820:	45b0      	cmp	r8, r6
 8003822:	4604      	mov	r4, r0
 8003824:	460d      	mov	r5, r1
 8003826:	d016      	beq.n	8003856 <__ieee754_rem_pio2+0xf6>
 8003828:	a38f      	add	r3, pc, #572	; (adr r3, 8003a68 <__ieee754_rem_pio2+0x308>)
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f7fc fe03 	bl	8000438 <__adddf3>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	e9ca 2300 	strd	r2, r3, [sl]
 800383a:	4620      	mov	r0, r4
 800383c:	4629      	mov	r1, r5
 800383e:	f7fc fdf9 	bl	8000434 <__aeabi_dsub>
 8003842:	a389      	add	r3, pc, #548	; (adr r3, 8003a68 <__ieee754_rem_pio2+0x308>)
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	f7fc fdf6 	bl	8000438 <__adddf3>
 800384c:	f04f 3bff 	mov.w	fp, #4294967295
 8003850:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003854:	e7c4      	b.n	80037e0 <__ieee754_rem_pio2+0x80>
 8003856:	a386      	add	r3, pc, #536	; (adr r3, 8003a70 <__ieee754_rem_pio2+0x310>)
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	f7fc fdec 	bl	8000438 <__adddf3>
 8003860:	a385      	add	r3, pc, #532	; (adr r3, 8003a78 <__ieee754_rem_pio2+0x318>)
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	4604      	mov	r4, r0
 8003868:	460d      	mov	r5, r1
 800386a:	f7fc fde5 	bl	8000438 <__adddf3>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	e9ca 2300 	strd	r2, r3, [sl]
 8003876:	4620      	mov	r0, r4
 8003878:	4629      	mov	r1, r5
 800387a:	f7fc fddb 	bl	8000434 <__aeabi_dsub>
 800387e:	a37e      	add	r3, pc, #504	; (adr r3, 8003a78 <__ieee754_rem_pio2+0x318>)
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	e7e0      	b.n	8003848 <__ieee754_rem_pio2+0xe8>
 8003886:	4b87      	ldr	r3, [pc, #540]	; (8003aa4 <__ieee754_rem_pio2+0x344>)
 8003888:	4598      	cmp	r8, r3
 800388a:	f300 80d9 	bgt.w	8003a40 <__ieee754_rem_pio2+0x2e0>
 800388e:	f000 fe49 	bl	8004524 <fabs>
 8003892:	ec55 4b10 	vmov	r4, r5, d0
 8003896:	ee10 0a10 	vmov	r0, s0
 800389a:	a379      	add	r3, pc, #484	; (adr r3, 8003a80 <__ieee754_rem_pio2+0x320>)
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	4629      	mov	r1, r5
 80038a2:	f7fc fc99 	bl	80001d8 <__aeabi_dmul>
 80038a6:	4b80      	ldr	r3, [pc, #512]	; (8003aa8 <__ieee754_rem_pio2+0x348>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	f7fc fdc5 	bl	8000438 <__adddf3>
 80038ae:	f7fd f801 	bl	80008b4 <__aeabi_d2iz>
 80038b2:	4683      	mov	fp, r0
 80038b4:	f7fc ff0c 	bl	80006d0 <__aeabi_i2d>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	ec43 2b18 	vmov	d8, r2, r3
 80038c0:	a367      	add	r3, pc, #412	; (adr r3, 8003a60 <__ieee754_rem_pio2+0x300>)
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	f7fc fc87 	bl	80001d8 <__aeabi_dmul>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4620      	mov	r0, r4
 80038d0:	4629      	mov	r1, r5
 80038d2:	f7fc fdaf 	bl	8000434 <__aeabi_dsub>
 80038d6:	a364      	add	r3, pc, #400	; (adr r3, 8003a68 <__ieee754_rem_pio2+0x308>)
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	4606      	mov	r6, r0
 80038de:	460f      	mov	r7, r1
 80038e0:	ec51 0b18 	vmov	r0, r1, d8
 80038e4:	f7fc fc78 	bl	80001d8 <__aeabi_dmul>
 80038e8:	f1bb 0f1f 	cmp.w	fp, #31
 80038ec:	4604      	mov	r4, r0
 80038ee:	460d      	mov	r5, r1
 80038f0:	dc0d      	bgt.n	800390e <__ieee754_rem_pio2+0x1ae>
 80038f2:	4b6e      	ldr	r3, [pc, #440]	; (8003aac <__ieee754_rem_pio2+0x34c>)
 80038f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80038f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038fc:	4543      	cmp	r3, r8
 80038fe:	d006      	beq.n	800390e <__ieee754_rem_pio2+0x1ae>
 8003900:	4622      	mov	r2, r4
 8003902:	462b      	mov	r3, r5
 8003904:	4630      	mov	r0, r6
 8003906:	4639      	mov	r1, r7
 8003908:	f7fc fd94 	bl	8000434 <__aeabi_dsub>
 800390c:	e00f      	b.n	800392e <__ieee754_rem_pio2+0x1ce>
 800390e:	462b      	mov	r3, r5
 8003910:	4622      	mov	r2, r4
 8003912:	4630      	mov	r0, r6
 8003914:	4639      	mov	r1, r7
 8003916:	f7fc fd8d 	bl	8000434 <__aeabi_dsub>
 800391a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800391e:	9303      	str	r3, [sp, #12]
 8003920:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003924:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8003928:	f1b8 0f10 	cmp.w	r8, #16
 800392c:	dc02      	bgt.n	8003934 <__ieee754_rem_pio2+0x1d4>
 800392e:	e9ca 0100 	strd	r0, r1, [sl]
 8003932:	e039      	b.n	80039a8 <__ieee754_rem_pio2+0x248>
 8003934:	a34e      	add	r3, pc, #312	; (adr r3, 8003a70 <__ieee754_rem_pio2+0x310>)
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	ec51 0b18 	vmov	r0, r1, d8
 800393e:	f7fc fc4b 	bl	80001d8 <__aeabi_dmul>
 8003942:	4604      	mov	r4, r0
 8003944:	460d      	mov	r5, r1
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4630      	mov	r0, r6
 800394c:	4639      	mov	r1, r7
 800394e:	f7fc fd71 	bl	8000434 <__aeabi_dsub>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4680      	mov	r8, r0
 8003958:	4689      	mov	r9, r1
 800395a:	4630      	mov	r0, r6
 800395c:	4639      	mov	r1, r7
 800395e:	f7fc fd69 	bl	8000434 <__aeabi_dsub>
 8003962:	4622      	mov	r2, r4
 8003964:	462b      	mov	r3, r5
 8003966:	f7fc fd65 	bl	8000434 <__aeabi_dsub>
 800396a:	a343      	add	r3, pc, #268	; (adr r3, 8003a78 <__ieee754_rem_pio2+0x318>)
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	4604      	mov	r4, r0
 8003972:	460d      	mov	r5, r1
 8003974:	ec51 0b18 	vmov	r0, r1, d8
 8003978:	f7fc fc2e 	bl	80001d8 <__aeabi_dmul>
 800397c:	4622      	mov	r2, r4
 800397e:	462b      	mov	r3, r5
 8003980:	f7fc fd58 	bl	8000434 <__aeabi_dsub>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4604      	mov	r4, r0
 800398a:	460d      	mov	r5, r1
 800398c:	4640      	mov	r0, r8
 800398e:	4649      	mov	r1, r9
 8003990:	f7fc fd50 	bl	8000434 <__aeabi_dsub>
 8003994:	9a03      	ldr	r2, [sp, #12]
 8003996:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b31      	cmp	r3, #49	; 0x31
 800399e:	dc24      	bgt.n	80039ea <__ieee754_rem_pio2+0x28a>
 80039a0:	e9ca 0100 	strd	r0, r1, [sl]
 80039a4:	4646      	mov	r6, r8
 80039a6:	464f      	mov	r7, r9
 80039a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80039ac:	4630      	mov	r0, r6
 80039ae:	4642      	mov	r2, r8
 80039b0:	464b      	mov	r3, r9
 80039b2:	4639      	mov	r1, r7
 80039b4:	f7fc fd3e 	bl	8000434 <__aeabi_dsub>
 80039b8:	462b      	mov	r3, r5
 80039ba:	4622      	mov	r2, r4
 80039bc:	f7fc fd3a 	bl	8000434 <__aeabi_dsub>
 80039c0:	9b02      	ldr	r3, [sp, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80039c8:	f6bf af0a 	bge.w	80037e0 <__ieee754_rem_pio2+0x80>
 80039cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80039d0:	f8ca 3004 	str.w	r3, [sl, #4]
 80039d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80039d8:	f8ca 8000 	str.w	r8, [sl]
 80039dc:	f8ca 0008 	str.w	r0, [sl, #8]
 80039e0:	f8ca 300c 	str.w	r3, [sl, #12]
 80039e4:	f1cb 0b00 	rsb	fp, fp, #0
 80039e8:	e6fa      	b.n	80037e0 <__ieee754_rem_pio2+0x80>
 80039ea:	a327      	add	r3, pc, #156	; (adr r3, 8003a88 <__ieee754_rem_pio2+0x328>)
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	ec51 0b18 	vmov	r0, r1, d8
 80039f4:	f7fc fbf0 	bl	80001d8 <__aeabi_dmul>
 80039f8:	4604      	mov	r4, r0
 80039fa:	460d      	mov	r5, r1
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4640      	mov	r0, r8
 8003a02:	4649      	mov	r1, r9
 8003a04:	f7fc fd16 	bl	8000434 <__aeabi_dsub>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4606      	mov	r6, r0
 8003a0e:	460f      	mov	r7, r1
 8003a10:	4640      	mov	r0, r8
 8003a12:	4649      	mov	r1, r9
 8003a14:	f7fc fd0e 	bl	8000434 <__aeabi_dsub>
 8003a18:	4622      	mov	r2, r4
 8003a1a:	462b      	mov	r3, r5
 8003a1c:	f7fc fd0a 	bl	8000434 <__aeabi_dsub>
 8003a20:	a31b      	add	r3, pc, #108	; (adr r3, 8003a90 <__ieee754_rem_pio2+0x330>)
 8003a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a26:	4604      	mov	r4, r0
 8003a28:	460d      	mov	r5, r1
 8003a2a:	ec51 0b18 	vmov	r0, r1, d8
 8003a2e:	f7fc fbd3 	bl	80001d8 <__aeabi_dmul>
 8003a32:	4622      	mov	r2, r4
 8003a34:	462b      	mov	r3, r5
 8003a36:	f7fc fcfd 	bl	8000434 <__aeabi_dsub>
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	460d      	mov	r5, r1
 8003a3e:	e75f      	b.n	8003900 <__ieee754_rem_pio2+0x1a0>
 8003a40:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <__ieee754_rem_pio2+0x350>)
 8003a42:	4598      	cmp	r8, r3
 8003a44:	dd36      	ble.n	8003ab4 <__ieee754_rem_pio2+0x354>
 8003a46:	ee10 2a10 	vmov	r2, s0
 8003a4a:	462b      	mov	r3, r5
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	4629      	mov	r1, r5
 8003a50:	f7fc fcf0 	bl	8000434 <__aeabi_dsub>
 8003a54:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003a58:	e9ca 0100 	strd	r0, r1, [sl]
 8003a5c:	e694      	b.n	8003788 <__ieee754_rem_pio2+0x28>
 8003a5e:	bf00      	nop
 8003a60:	54400000 	.word	0x54400000
 8003a64:	3ff921fb 	.word	0x3ff921fb
 8003a68:	1a626331 	.word	0x1a626331
 8003a6c:	3dd0b461 	.word	0x3dd0b461
 8003a70:	1a600000 	.word	0x1a600000
 8003a74:	3dd0b461 	.word	0x3dd0b461
 8003a78:	2e037073 	.word	0x2e037073
 8003a7c:	3ba3198a 	.word	0x3ba3198a
 8003a80:	6dc9c883 	.word	0x6dc9c883
 8003a84:	3fe45f30 	.word	0x3fe45f30
 8003a88:	2e000000 	.word	0x2e000000
 8003a8c:	3ba3198a 	.word	0x3ba3198a
 8003a90:	252049c1 	.word	0x252049c1
 8003a94:	397b839a 	.word	0x397b839a
 8003a98:	3fe921fb 	.word	0x3fe921fb
 8003a9c:	4002d97b 	.word	0x4002d97b
 8003aa0:	3ff921fb 	.word	0x3ff921fb
 8003aa4:	413921fb 	.word	0x413921fb
 8003aa8:	3fe00000 	.word	0x3fe00000
 8003aac:	080047c8 	.word	0x080047c8
 8003ab0:	7fefffff 	.word	0x7fefffff
 8003ab4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8003ab8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8003abc:	ee10 0a10 	vmov	r0, s0
 8003ac0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8003ac4:	ee10 6a10 	vmov	r6, s0
 8003ac8:	460f      	mov	r7, r1
 8003aca:	f7fc fef3 	bl	80008b4 <__aeabi_d2iz>
 8003ace:	f7fc fdff 	bl	80006d0 <__aeabi_i2d>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	4639      	mov	r1, r7
 8003ada:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ade:	f7fc fca9 	bl	8000434 <__aeabi_dsub>
 8003ae2:	4b23      	ldr	r3, [pc, #140]	; (8003b70 <__ieee754_rem_pio2+0x410>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f7fc fb77 	bl	80001d8 <__aeabi_dmul>
 8003aea:	460f      	mov	r7, r1
 8003aec:	4606      	mov	r6, r0
 8003aee:	f7fc fee1 	bl	80008b4 <__aeabi_d2iz>
 8003af2:	f7fc fded 	bl	80006d0 <__aeabi_i2d>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4630      	mov	r0, r6
 8003afc:	4639      	mov	r1, r7
 8003afe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003b02:	f7fc fc97 	bl	8000434 <__aeabi_dsub>
 8003b06:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <__ieee754_rem_pio2+0x410>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f7fc fb65 	bl	80001d8 <__aeabi_dmul>
 8003b0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003b12:	ad04      	add	r5, sp, #16
 8003b14:	f04f 0803 	mov.w	r8, #3
 8003b18:	46a9      	mov	r9, r5
 8003b1a:	2600      	movs	r6, #0
 8003b1c:	2700      	movs	r7, #0
 8003b1e:	4632      	mov	r2, r6
 8003b20:	463b      	mov	r3, r7
 8003b22:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003b26:	46c3      	mov	fp, r8
 8003b28:	3d08      	subs	r5, #8
 8003b2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8003b2e:	f7fc fe8f 	bl	8000850 <__aeabi_dcmpeq>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d1f3      	bne.n	8003b1e <__ieee754_rem_pio2+0x3be>
 8003b36:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <__ieee754_rem_pio2+0x414>)
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	4622      	mov	r2, r4
 8003b40:	465b      	mov	r3, fp
 8003b42:	4651      	mov	r1, sl
 8003b44:	4648      	mov	r0, r9
 8003b46:	f000 f8df 	bl	8003d08 <__kernel_rem_pio2>
 8003b4a:	9b02      	ldr	r3, [sp, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	4683      	mov	fp, r0
 8003b50:	f6bf ae46 	bge.w	80037e0 <__ieee754_rem_pio2+0x80>
 8003b54:	e9da 2100 	ldrd	r2, r1, [sl]
 8003b58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b5c:	e9ca 2300 	strd	r2, r3, [sl]
 8003b60:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8003b64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b68:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8003b6c:	e73a      	b.n	80039e4 <__ieee754_rem_pio2+0x284>
 8003b6e:	bf00      	nop
 8003b70:	41700000 	.word	0x41700000
 8003b74:	08004848 	.word	0x08004848

08003b78 <__kernel_cos>:
 8003b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b7c:	ec57 6b10 	vmov	r6, r7, d0
 8003b80:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003b84:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003b88:	ed8d 1b00 	vstr	d1, [sp]
 8003b8c:	da07      	bge.n	8003b9e <__kernel_cos+0x26>
 8003b8e:	ee10 0a10 	vmov	r0, s0
 8003b92:	4639      	mov	r1, r7
 8003b94:	f7fc fe8e 	bl	80008b4 <__aeabi_d2iz>
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	f000 8088 	beq.w	8003cae <__kernel_cos+0x136>
 8003b9e:	4632      	mov	r2, r6
 8003ba0:	463b      	mov	r3, r7
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	4639      	mov	r1, r7
 8003ba6:	f7fc fb17 	bl	80001d8 <__aeabi_dmul>
 8003baa:	4b51      	ldr	r3, [pc, #324]	; (8003cf0 <__kernel_cos+0x178>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	4604      	mov	r4, r0
 8003bb0:	460d      	mov	r5, r1
 8003bb2:	f7fc fb11 	bl	80001d8 <__aeabi_dmul>
 8003bb6:	a340      	add	r3, pc, #256	; (adr r3, 8003cb8 <__kernel_cos+0x140>)
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	4682      	mov	sl, r0
 8003bbe:	468b      	mov	fp, r1
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	f7fc fb08 	bl	80001d8 <__aeabi_dmul>
 8003bc8:	a33d      	add	r3, pc, #244	; (adr r3, 8003cc0 <__kernel_cos+0x148>)
 8003bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bce:	f7fc fc33 	bl	8000438 <__adddf3>
 8003bd2:	4622      	mov	r2, r4
 8003bd4:	462b      	mov	r3, r5
 8003bd6:	f7fc faff 	bl	80001d8 <__aeabi_dmul>
 8003bda:	a33b      	add	r3, pc, #236	; (adr r3, 8003cc8 <__kernel_cos+0x150>)
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	f7fc fc28 	bl	8000434 <__aeabi_dsub>
 8003be4:	4622      	mov	r2, r4
 8003be6:	462b      	mov	r3, r5
 8003be8:	f7fc faf6 	bl	80001d8 <__aeabi_dmul>
 8003bec:	a338      	add	r3, pc, #224	; (adr r3, 8003cd0 <__kernel_cos+0x158>)
 8003bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf2:	f7fc fc21 	bl	8000438 <__adddf3>
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	462b      	mov	r3, r5
 8003bfa:	f7fc faed 	bl	80001d8 <__aeabi_dmul>
 8003bfe:	a336      	add	r3, pc, #216	; (adr r3, 8003cd8 <__kernel_cos+0x160>)
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f7fc fc16 	bl	8000434 <__aeabi_dsub>
 8003c08:	4622      	mov	r2, r4
 8003c0a:	462b      	mov	r3, r5
 8003c0c:	f7fc fae4 	bl	80001d8 <__aeabi_dmul>
 8003c10:	a333      	add	r3, pc, #204	; (adr r3, 8003ce0 <__kernel_cos+0x168>)
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	f7fc fc0f 	bl	8000438 <__adddf3>
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	462b      	mov	r3, r5
 8003c1e:	f7fc fadb 	bl	80001d8 <__aeabi_dmul>
 8003c22:	4622      	mov	r2, r4
 8003c24:	462b      	mov	r3, r5
 8003c26:	f7fc fad7 	bl	80001d8 <__aeabi_dmul>
 8003c2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c2e:	4604      	mov	r4, r0
 8003c30:	460d      	mov	r5, r1
 8003c32:	4630      	mov	r0, r6
 8003c34:	4639      	mov	r1, r7
 8003c36:	f7fc facf 	bl	80001d8 <__aeabi_dmul>
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4629      	mov	r1, r5
 8003c40:	4620      	mov	r0, r4
 8003c42:	f7fc fbf7 	bl	8000434 <__aeabi_dsub>
 8003c46:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <__kernel_cos+0x17c>)
 8003c48:	4598      	cmp	r8, r3
 8003c4a:	4606      	mov	r6, r0
 8003c4c:	460f      	mov	r7, r1
 8003c4e:	dc10      	bgt.n	8003c72 <__kernel_cos+0xfa>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4650      	mov	r0, sl
 8003c56:	4659      	mov	r1, fp
 8003c58:	f7fc fbec 	bl	8000434 <__aeabi_dsub>
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4926      	ldr	r1, [pc, #152]	; (8003cf8 <__kernel_cos+0x180>)
 8003c60:	4602      	mov	r2, r0
 8003c62:	2000      	movs	r0, #0
 8003c64:	f7fc fbe6 	bl	8000434 <__aeabi_dsub>
 8003c68:	ec41 0b10 	vmov	d0, r0, r1
 8003c6c:	b003      	add	sp, #12
 8003c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c72:	4b22      	ldr	r3, [pc, #136]	; (8003cfc <__kernel_cos+0x184>)
 8003c74:	4920      	ldr	r1, [pc, #128]	; (8003cf8 <__kernel_cos+0x180>)
 8003c76:	4598      	cmp	r8, r3
 8003c78:	bfcc      	ite	gt
 8003c7a:	4d21      	ldrgt	r5, [pc, #132]	; (8003d00 <__kernel_cos+0x188>)
 8003c7c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003c80:	2400      	movs	r4, #0
 8003c82:	4622      	mov	r2, r4
 8003c84:	462b      	mov	r3, r5
 8003c86:	2000      	movs	r0, #0
 8003c88:	f7fc fbd4 	bl	8000434 <__aeabi_dsub>
 8003c8c:	4622      	mov	r2, r4
 8003c8e:	4680      	mov	r8, r0
 8003c90:	4689      	mov	r9, r1
 8003c92:	462b      	mov	r3, r5
 8003c94:	4650      	mov	r0, sl
 8003c96:	4659      	mov	r1, fp
 8003c98:	f7fc fbcc 	bl	8000434 <__aeabi_dsub>
 8003c9c:	4632      	mov	r2, r6
 8003c9e:	463b      	mov	r3, r7
 8003ca0:	f7fc fbc8 	bl	8000434 <__aeabi_dsub>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4640      	mov	r0, r8
 8003caa:	4649      	mov	r1, r9
 8003cac:	e7da      	b.n	8003c64 <__kernel_cos+0xec>
 8003cae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003ce8 <__kernel_cos+0x170>
 8003cb2:	e7db      	b.n	8003c6c <__kernel_cos+0xf4>
 8003cb4:	f3af 8000 	nop.w
 8003cb8:	be8838d4 	.word	0xbe8838d4
 8003cbc:	bda8fae9 	.word	0xbda8fae9
 8003cc0:	bdb4b1c4 	.word	0xbdb4b1c4
 8003cc4:	3e21ee9e 	.word	0x3e21ee9e
 8003cc8:	809c52ad 	.word	0x809c52ad
 8003ccc:	3e927e4f 	.word	0x3e927e4f
 8003cd0:	19cb1590 	.word	0x19cb1590
 8003cd4:	3efa01a0 	.word	0x3efa01a0
 8003cd8:	16c15177 	.word	0x16c15177
 8003cdc:	3f56c16c 	.word	0x3f56c16c
 8003ce0:	5555554c 	.word	0x5555554c
 8003ce4:	3fa55555 	.word	0x3fa55555
 8003ce8:	00000000 	.word	0x00000000
 8003cec:	3ff00000 	.word	0x3ff00000
 8003cf0:	3fe00000 	.word	0x3fe00000
 8003cf4:	3fd33332 	.word	0x3fd33332
 8003cf8:	3ff00000 	.word	0x3ff00000
 8003cfc:	3fe90000 	.word	0x3fe90000
 8003d00:	3fd20000 	.word	0x3fd20000
 8003d04:	00000000 	.word	0x00000000

08003d08 <__kernel_rem_pio2>:
 8003d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d0c:	ed2d 8b02 	vpush	{d8}
 8003d10:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8003d14:	f112 0f14 	cmn.w	r2, #20
 8003d18:	9308      	str	r3, [sp, #32]
 8003d1a:	9101      	str	r1, [sp, #4]
 8003d1c:	4bc4      	ldr	r3, [pc, #784]	; (8004030 <__kernel_rem_pio2+0x328>)
 8003d1e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8003d20:	900b      	str	r0, [sp, #44]	; 0x2c
 8003d22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d26:	9302      	str	r3, [sp, #8]
 8003d28:	9b08      	ldr	r3, [sp, #32]
 8003d2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d2e:	bfa8      	it	ge
 8003d30:	1ed4      	subge	r4, r2, #3
 8003d32:	9306      	str	r3, [sp, #24]
 8003d34:	bfb2      	itee	lt
 8003d36:	2400      	movlt	r4, #0
 8003d38:	2318      	movge	r3, #24
 8003d3a:	fb94 f4f3 	sdivge	r4, r4, r3
 8003d3e:	f06f 0317 	mvn.w	r3, #23
 8003d42:	fb04 3303 	mla	r3, r4, r3, r3
 8003d46:	eb03 0a02 	add.w	sl, r3, r2
 8003d4a:	9b02      	ldr	r3, [sp, #8]
 8003d4c:	9a06      	ldr	r2, [sp, #24]
 8003d4e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8004020 <__kernel_rem_pio2+0x318>
 8003d52:	eb03 0802 	add.w	r8, r3, r2
 8003d56:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003d58:	1aa7      	subs	r7, r4, r2
 8003d5a:	ae22      	add	r6, sp, #136	; 0x88
 8003d5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003d60:	2500      	movs	r5, #0
 8003d62:	4545      	cmp	r5, r8
 8003d64:	dd13      	ble.n	8003d8e <__kernel_rem_pio2+0x86>
 8003d66:	9b08      	ldr	r3, [sp, #32]
 8003d68:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8004020 <__kernel_rem_pio2+0x318>
 8003d6c:	aa22      	add	r2, sp, #136	; 0x88
 8003d6e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003d72:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8003d76:	f04f 0800 	mov.w	r8, #0
 8003d7a:	9b02      	ldr	r3, [sp, #8]
 8003d7c:	4598      	cmp	r8, r3
 8003d7e:	dc2f      	bgt.n	8003de0 <__kernel_rem_pio2+0xd8>
 8003d80:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003d84:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8003d88:	462f      	mov	r7, r5
 8003d8a:	2600      	movs	r6, #0
 8003d8c:	e01b      	b.n	8003dc6 <__kernel_rem_pio2+0xbe>
 8003d8e:	42ef      	cmn	r7, r5
 8003d90:	d407      	bmi.n	8003da2 <__kernel_rem_pio2+0x9a>
 8003d92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003d96:	f7fc fc9b 	bl	80006d0 <__aeabi_i2d>
 8003d9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003d9e:	3501      	adds	r5, #1
 8003da0:	e7df      	b.n	8003d62 <__kernel_rem_pio2+0x5a>
 8003da2:	ec51 0b18 	vmov	r0, r1, d8
 8003da6:	e7f8      	b.n	8003d9a <__kernel_rem_pio2+0x92>
 8003da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003db0:	f7fc fa12 	bl	80001d8 <__aeabi_dmul>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003dbc:	f7fc fb3c 	bl	8000438 <__adddf3>
 8003dc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003dc4:	3601      	adds	r6, #1
 8003dc6:	9b06      	ldr	r3, [sp, #24]
 8003dc8:	429e      	cmp	r6, r3
 8003dca:	f1a7 0708 	sub.w	r7, r7, #8
 8003dce:	ddeb      	ble.n	8003da8 <__kernel_rem_pio2+0xa0>
 8003dd0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003dd4:	f108 0801 	add.w	r8, r8, #1
 8003dd8:	ecab 7b02 	vstmia	fp!, {d7}
 8003ddc:	3508      	adds	r5, #8
 8003dde:	e7cc      	b.n	8003d7a <__kernel_rem_pio2+0x72>
 8003de0:	9b02      	ldr	r3, [sp, #8]
 8003de2:	aa0e      	add	r2, sp, #56	; 0x38
 8003de4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003de8:	930d      	str	r3, [sp, #52]	; 0x34
 8003dea:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003dec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003df0:	9c02      	ldr	r4, [sp, #8]
 8003df2:	930c      	str	r3, [sp, #48]	; 0x30
 8003df4:	00e3      	lsls	r3, r4, #3
 8003df6:	930a      	str	r3, [sp, #40]	; 0x28
 8003df8:	ab9a      	add	r3, sp, #616	; 0x268
 8003dfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003dfe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8003e02:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8003e06:	ab72      	add	r3, sp, #456	; 0x1c8
 8003e08:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8003e0c:	46c3      	mov	fp, r8
 8003e0e:	46a1      	mov	r9, r4
 8003e10:	f1b9 0f00 	cmp.w	r9, #0
 8003e14:	f1a5 0508 	sub.w	r5, r5, #8
 8003e18:	dc77      	bgt.n	8003f0a <__kernel_rem_pio2+0x202>
 8003e1a:	ec47 6b10 	vmov	d0, r6, r7
 8003e1e:	4650      	mov	r0, sl
 8003e20:	f000 fc0a 	bl	8004638 <scalbn>
 8003e24:	ec57 6b10 	vmov	r6, r7, d0
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003e2e:	ee10 0a10 	vmov	r0, s0
 8003e32:	4639      	mov	r1, r7
 8003e34:	f7fc f9d0 	bl	80001d8 <__aeabi_dmul>
 8003e38:	ec41 0b10 	vmov	d0, r0, r1
 8003e3c:	f000 fb7c 	bl	8004538 <floor>
 8003e40:	4b7c      	ldr	r3, [pc, #496]	; (8004034 <__kernel_rem_pio2+0x32c>)
 8003e42:	ec51 0b10 	vmov	r0, r1, d0
 8003e46:	2200      	movs	r2, #0
 8003e48:	f7fc f9c6 	bl	80001d8 <__aeabi_dmul>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4630      	mov	r0, r6
 8003e52:	4639      	mov	r1, r7
 8003e54:	f7fc faee 	bl	8000434 <__aeabi_dsub>
 8003e58:	460f      	mov	r7, r1
 8003e5a:	4606      	mov	r6, r0
 8003e5c:	f7fc fd2a 	bl	80008b4 <__aeabi_d2iz>
 8003e60:	9004      	str	r0, [sp, #16]
 8003e62:	f7fc fc35 	bl	80006d0 <__aeabi_i2d>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	4639      	mov	r1, r7
 8003e6e:	f7fc fae1 	bl	8000434 <__aeabi_dsub>
 8003e72:	f1ba 0f00 	cmp.w	sl, #0
 8003e76:	4606      	mov	r6, r0
 8003e78:	460f      	mov	r7, r1
 8003e7a:	dd6d      	ble.n	8003f58 <__kernel_rem_pio2+0x250>
 8003e7c:	1e62      	subs	r2, r4, #1
 8003e7e:	ab0e      	add	r3, sp, #56	; 0x38
 8003e80:	9d04      	ldr	r5, [sp, #16]
 8003e82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003e86:	f1ca 0118 	rsb	r1, sl, #24
 8003e8a:	fa40 f301 	asr.w	r3, r0, r1
 8003e8e:	441d      	add	r5, r3
 8003e90:	408b      	lsls	r3, r1
 8003e92:	1ac0      	subs	r0, r0, r3
 8003e94:	ab0e      	add	r3, sp, #56	; 0x38
 8003e96:	9504      	str	r5, [sp, #16]
 8003e98:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003e9c:	f1ca 0317 	rsb	r3, sl, #23
 8003ea0:	fa40 fb03 	asr.w	fp, r0, r3
 8003ea4:	f1bb 0f00 	cmp.w	fp, #0
 8003ea8:	dd65      	ble.n	8003f76 <__kernel_rem_pio2+0x26e>
 8003eaa:	9b04      	ldr	r3, [sp, #16]
 8003eac:	2200      	movs	r2, #0
 8003eae:	3301      	adds	r3, #1
 8003eb0:	9304      	str	r3, [sp, #16]
 8003eb2:	4615      	mov	r5, r2
 8003eb4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003eb8:	4294      	cmp	r4, r2
 8003eba:	f300 809c 	bgt.w	8003ff6 <__kernel_rem_pio2+0x2ee>
 8003ebe:	f1ba 0f00 	cmp.w	sl, #0
 8003ec2:	dd07      	ble.n	8003ed4 <__kernel_rem_pio2+0x1cc>
 8003ec4:	f1ba 0f01 	cmp.w	sl, #1
 8003ec8:	f000 80c0 	beq.w	800404c <__kernel_rem_pio2+0x344>
 8003ecc:	f1ba 0f02 	cmp.w	sl, #2
 8003ed0:	f000 80c6 	beq.w	8004060 <__kernel_rem_pio2+0x358>
 8003ed4:	f1bb 0f02 	cmp.w	fp, #2
 8003ed8:	d14d      	bne.n	8003f76 <__kernel_rem_pio2+0x26e>
 8003eda:	4632      	mov	r2, r6
 8003edc:	463b      	mov	r3, r7
 8003ede:	4956      	ldr	r1, [pc, #344]	; (8004038 <__kernel_rem_pio2+0x330>)
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f7fc faa7 	bl	8000434 <__aeabi_dsub>
 8003ee6:	4606      	mov	r6, r0
 8003ee8:	460f      	mov	r7, r1
 8003eea:	2d00      	cmp	r5, #0
 8003eec:	d043      	beq.n	8003f76 <__kernel_rem_pio2+0x26e>
 8003eee:	4650      	mov	r0, sl
 8003ef0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8004028 <__kernel_rem_pio2+0x320>
 8003ef4:	f000 fba0 	bl	8004638 <scalbn>
 8003ef8:	4630      	mov	r0, r6
 8003efa:	4639      	mov	r1, r7
 8003efc:	ec53 2b10 	vmov	r2, r3, d0
 8003f00:	f7fc fa98 	bl	8000434 <__aeabi_dsub>
 8003f04:	4606      	mov	r6, r0
 8003f06:	460f      	mov	r7, r1
 8003f08:	e035      	b.n	8003f76 <__kernel_rem_pio2+0x26e>
 8003f0a:	4b4c      	ldr	r3, [pc, #304]	; (800403c <__kernel_rem_pio2+0x334>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	4630      	mov	r0, r6
 8003f10:	4639      	mov	r1, r7
 8003f12:	f7fc f961 	bl	80001d8 <__aeabi_dmul>
 8003f16:	f7fc fccd 	bl	80008b4 <__aeabi_d2iz>
 8003f1a:	f7fc fbd9 	bl	80006d0 <__aeabi_i2d>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	ec43 2b18 	vmov	d8, r2, r3
 8003f26:	4b46      	ldr	r3, [pc, #280]	; (8004040 <__kernel_rem_pio2+0x338>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f7fc f955 	bl	80001d8 <__aeabi_dmul>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4630      	mov	r0, r6
 8003f34:	4639      	mov	r1, r7
 8003f36:	f7fc fa7d 	bl	8000434 <__aeabi_dsub>
 8003f3a:	f7fc fcbb 	bl	80008b4 <__aeabi_d2iz>
 8003f3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003f42:	f84b 0b04 	str.w	r0, [fp], #4
 8003f46:	ec51 0b18 	vmov	r0, r1, d8
 8003f4a:	f7fc fa75 	bl	8000438 <__adddf3>
 8003f4e:	f109 39ff 	add.w	r9, r9, #4294967295
 8003f52:	4606      	mov	r6, r0
 8003f54:	460f      	mov	r7, r1
 8003f56:	e75b      	b.n	8003e10 <__kernel_rem_pio2+0x108>
 8003f58:	d106      	bne.n	8003f68 <__kernel_rem_pio2+0x260>
 8003f5a:	1e63      	subs	r3, r4, #1
 8003f5c:	aa0e      	add	r2, sp, #56	; 0x38
 8003f5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003f62:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8003f66:	e79d      	b.n	8003ea4 <__kernel_rem_pio2+0x19c>
 8003f68:	4b36      	ldr	r3, [pc, #216]	; (8004044 <__kernel_rem_pio2+0x33c>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f7fc fc8e 	bl	800088c <__aeabi_dcmpge>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d13d      	bne.n	8003ff0 <__kernel_rem_pio2+0x2e8>
 8003f74:	4683      	mov	fp, r0
 8003f76:	2200      	movs	r2, #0
 8003f78:	2300      	movs	r3, #0
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	4639      	mov	r1, r7
 8003f7e:	f7fc fc67 	bl	8000850 <__aeabi_dcmpeq>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	f000 80c0 	beq.w	8004108 <__kernel_rem_pio2+0x400>
 8003f88:	1e65      	subs	r5, r4, #1
 8003f8a:	462b      	mov	r3, r5
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	9902      	ldr	r1, [sp, #8]
 8003f90:	428b      	cmp	r3, r1
 8003f92:	da6c      	bge.n	800406e <__kernel_rem_pio2+0x366>
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	f000 8089 	beq.w	80040ac <__kernel_rem_pio2+0x3a4>
 8003f9a:	ab0e      	add	r3, sp, #56	; 0x38
 8003f9c:	f1aa 0a18 	sub.w	sl, sl, #24
 8003fa0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80ad 	beq.w	8004104 <__kernel_rem_pio2+0x3fc>
 8003faa:	4650      	mov	r0, sl
 8003fac:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8004028 <__kernel_rem_pio2+0x320>
 8003fb0:	f000 fb42 	bl	8004638 <scalbn>
 8003fb4:	ab9a      	add	r3, sp, #616	; 0x268
 8003fb6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003fba:	ec57 6b10 	vmov	r6, r7, d0
 8003fbe:	00ec      	lsls	r4, r5, #3
 8003fc0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8003fc4:	46aa      	mov	sl, r5
 8003fc6:	f1ba 0f00 	cmp.w	sl, #0
 8003fca:	f280 80d6 	bge.w	800417a <__kernel_rem_pio2+0x472>
 8003fce:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8004020 <__kernel_rem_pio2+0x318>
 8003fd2:	462e      	mov	r6, r5
 8003fd4:	2e00      	cmp	r6, #0
 8003fd6:	f2c0 8104 	blt.w	80041e2 <__kernel_rem_pio2+0x4da>
 8003fda:	ab72      	add	r3, sp, #456	; 0x1c8
 8003fdc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003fe0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004048 <__kernel_rem_pio2+0x340>
 8003fe4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8003fe8:	f04f 0800 	mov.w	r8, #0
 8003fec:	1baf      	subs	r7, r5, r6
 8003fee:	e0ea      	b.n	80041c6 <__kernel_rem_pio2+0x4be>
 8003ff0:	f04f 0b02 	mov.w	fp, #2
 8003ff4:	e759      	b.n	8003eaa <__kernel_rem_pio2+0x1a2>
 8003ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8003ffa:	b955      	cbnz	r5, 8004012 <__kernel_rem_pio2+0x30a>
 8003ffc:	b123      	cbz	r3, 8004008 <__kernel_rem_pio2+0x300>
 8003ffe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004002:	f8c8 3000 	str.w	r3, [r8]
 8004006:	2301      	movs	r3, #1
 8004008:	3201      	adds	r2, #1
 800400a:	f108 0804 	add.w	r8, r8, #4
 800400e:	461d      	mov	r5, r3
 8004010:	e752      	b.n	8003eb8 <__kernel_rem_pio2+0x1b0>
 8004012:	1acb      	subs	r3, r1, r3
 8004014:	f8c8 3000 	str.w	r3, [r8]
 8004018:	462b      	mov	r3, r5
 800401a:	e7f5      	b.n	8004008 <__kernel_rem_pio2+0x300>
 800401c:	f3af 8000 	nop.w
	...
 800402c:	3ff00000 	.word	0x3ff00000
 8004030:	08004990 	.word	0x08004990
 8004034:	40200000 	.word	0x40200000
 8004038:	3ff00000 	.word	0x3ff00000
 800403c:	3e700000 	.word	0x3e700000
 8004040:	41700000 	.word	0x41700000
 8004044:	3fe00000 	.word	0x3fe00000
 8004048:	08004950 	.word	0x08004950
 800404c:	1e62      	subs	r2, r4, #1
 800404e:	ab0e      	add	r3, sp, #56	; 0x38
 8004050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004054:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004058:	a90e      	add	r1, sp, #56	; 0x38
 800405a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800405e:	e739      	b.n	8003ed4 <__kernel_rem_pio2+0x1cc>
 8004060:	1e62      	subs	r2, r4, #1
 8004062:	ab0e      	add	r3, sp, #56	; 0x38
 8004064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004068:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800406c:	e7f4      	b.n	8004058 <__kernel_rem_pio2+0x350>
 800406e:	a90e      	add	r1, sp, #56	; 0x38
 8004070:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004074:	3b01      	subs	r3, #1
 8004076:	430a      	orrs	r2, r1
 8004078:	e789      	b.n	8003f8e <__kernel_rem_pio2+0x286>
 800407a:	3301      	adds	r3, #1
 800407c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004080:	2900      	cmp	r1, #0
 8004082:	d0fa      	beq.n	800407a <__kernel_rem_pio2+0x372>
 8004084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004086:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800408a:	446a      	add	r2, sp
 800408c:	3a98      	subs	r2, #152	; 0x98
 800408e:	920a      	str	r2, [sp, #40]	; 0x28
 8004090:	9a08      	ldr	r2, [sp, #32]
 8004092:	18e3      	adds	r3, r4, r3
 8004094:	18a5      	adds	r5, r4, r2
 8004096:	aa22      	add	r2, sp, #136	; 0x88
 8004098:	f104 0801 	add.w	r8, r4, #1
 800409c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80040a0:	9304      	str	r3, [sp, #16]
 80040a2:	9b04      	ldr	r3, [sp, #16]
 80040a4:	4543      	cmp	r3, r8
 80040a6:	da04      	bge.n	80040b2 <__kernel_rem_pio2+0x3aa>
 80040a8:	461c      	mov	r4, r3
 80040aa:	e6a3      	b.n	8003df4 <__kernel_rem_pio2+0xec>
 80040ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80040ae:	2301      	movs	r3, #1
 80040b0:	e7e4      	b.n	800407c <__kernel_rem_pio2+0x374>
 80040b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80040b8:	f7fc fb0a 	bl	80006d0 <__aeabi_i2d>
 80040bc:	e8e5 0102 	strd	r0, r1, [r5], #8
 80040c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040c2:	46ab      	mov	fp, r5
 80040c4:	461c      	mov	r4, r3
 80040c6:	f04f 0900 	mov.w	r9, #0
 80040ca:	2600      	movs	r6, #0
 80040cc:	2700      	movs	r7, #0
 80040ce:	9b06      	ldr	r3, [sp, #24]
 80040d0:	4599      	cmp	r9, r3
 80040d2:	dd06      	ble.n	80040e2 <__kernel_rem_pio2+0x3da>
 80040d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040d6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80040da:	f108 0801 	add.w	r8, r8, #1
 80040de:	930a      	str	r3, [sp, #40]	; 0x28
 80040e0:	e7df      	b.n	80040a2 <__kernel_rem_pio2+0x39a>
 80040e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80040e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80040ea:	f7fc f875 	bl	80001d8 <__aeabi_dmul>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4630      	mov	r0, r6
 80040f4:	4639      	mov	r1, r7
 80040f6:	f7fc f99f 	bl	8000438 <__adddf3>
 80040fa:	f109 0901 	add.w	r9, r9, #1
 80040fe:	4606      	mov	r6, r0
 8004100:	460f      	mov	r7, r1
 8004102:	e7e4      	b.n	80040ce <__kernel_rem_pio2+0x3c6>
 8004104:	3d01      	subs	r5, #1
 8004106:	e748      	b.n	8003f9a <__kernel_rem_pio2+0x292>
 8004108:	ec47 6b10 	vmov	d0, r6, r7
 800410c:	f1ca 0000 	rsb	r0, sl, #0
 8004110:	f000 fa92 	bl	8004638 <scalbn>
 8004114:	ec57 6b10 	vmov	r6, r7, d0
 8004118:	4ba0      	ldr	r3, [pc, #640]	; (800439c <__kernel_rem_pio2+0x694>)
 800411a:	ee10 0a10 	vmov	r0, s0
 800411e:	2200      	movs	r2, #0
 8004120:	4639      	mov	r1, r7
 8004122:	f7fc fbb3 	bl	800088c <__aeabi_dcmpge>
 8004126:	b1f8      	cbz	r0, 8004168 <__kernel_rem_pio2+0x460>
 8004128:	4b9d      	ldr	r3, [pc, #628]	; (80043a0 <__kernel_rem_pio2+0x698>)
 800412a:	2200      	movs	r2, #0
 800412c:	4630      	mov	r0, r6
 800412e:	4639      	mov	r1, r7
 8004130:	f7fc f852 	bl	80001d8 <__aeabi_dmul>
 8004134:	f7fc fbbe 	bl	80008b4 <__aeabi_d2iz>
 8004138:	4680      	mov	r8, r0
 800413a:	f7fc fac9 	bl	80006d0 <__aeabi_i2d>
 800413e:	4b97      	ldr	r3, [pc, #604]	; (800439c <__kernel_rem_pio2+0x694>)
 8004140:	2200      	movs	r2, #0
 8004142:	f7fc f849 	bl	80001d8 <__aeabi_dmul>
 8004146:	460b      	mov	r3, r1
 8004148:	4602      	mov	r2, r0
 800414a:	4639      	mov	r1, r7
 800414c:	4630      	mov	r0, r6
 800414e:	f7fc f971 	bl	8000434 <__aeabi_dsub>
 8004152:	f7fc fbaf 	bl	80008b4 <__aeabi_d2iz>
 8004156:	1c65      	adds	r5, r4, #1
 8004158:	ab0e      	add	r3, sp, #56	; 0x38
 800415a:	f10a 0a18 	add.w	sl, sl, #24
 800415e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004162:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004166:	e720      	b.n	8003faa <__kernel_rem_pio2+0x2a2>
 8004168:	4630      	mov	r0, r6
 800416a:	4639      	mov	r1, r7
 800416c:	f7fc fba2 	bl	80008b4 <__aeabi_d2iz>
 8004170:	ab0e      	add	r3, sp, #56	; 0x38
 8004172:	4625      	mov	r5, r4
 8004174:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004178:	e717      	b.n	8003faa <__kernel_rem_pio2+0x2a2>
 800417a:	ab0e      	add	r3, sp, #56	; 0x38
 800417c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004180:	f7fc faa6 	bl	80006d0 <__aeabi_i2d>
 8004184:	4632      	mov	r2, r6
 8004186:	463b      	mov	r3, r7
 8004188:	f7fc f826 	bl	80001d8 <__aeabi_dmul>
 800418c:	4b84      	ldr	r3, [pc, #528]	; (80043a0 <__kernel_rem_pio2+0x698>)
 800418e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8004192:	2200      	movs	r2, #0
 8004194:	4630      	mov	r0, r6
 8004196:	4639      	mov	r1, r7
 8004198:	f7fc f81e 	bl	80001d8 <__aeabi_dmul>
 800419c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041a0:	4606      	mov	r6, r0
 80041a2:	460f      	mov	r7, r1
 80041a4:	e70f      	b.n	8003fc6 <__kernel_rem_pio2+0x2be>
 80041a6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80041aa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80041ae:	f7fc f813 	bl	80001d8 <__aeabi_dmul>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041ba:	f7fc f93d 	bl	8000438 <__adddf3>
 80041be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80041c2:	f108 0801 	add.w	r8, r8, #1
 80041c6:	9b02      	ldr	r3, [sp, #8]
 80041c8:	4598      	cmp	r8, r3
 80041ca:	dc01      	bgt.n	80041d0 <__kernel_rem_pio2+0x4c8>
 80041cc:	45b8      	cmp	r8, r7
 80041ce:	ddea      	ble.n	80041a6 <__kernel_rem_pio2+0x49e>
 80041d0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80041d4:	ab4a      	add	r3, sp, #296	; 0x128
 80041d6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80041da:	ed87 7b00 	vstr	d7, [r7]
 80041de:	3e01      	subs	r6, #1
 80041e0:	e6f8      	b.n	8003fd4 <__kernel_rem_pio2+0x2cc>
 80041e2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	dc0b      	bgt.n	8004200 <__kernel_rem_pio2+0x4f8>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	dc35      	bgt.n	8004258 <__kernel_rem_pio2+0x550>
 80041ec:	d059      	beq.n	80042a2 <__kernel_rem_pio2+0x59a>
 80041ee:	9b04      	ldr	r3, [sp, #16]
 80041f0:	f003 0007 	and.w	r0, r3, #7
 80041f4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80041f8:	ecbd 8b02 	vpop	{d8}
 80041fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004200:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004202:	2b03      	cmp	r3, #3
 8004204:	d1f3      	bne.n	80041ee <__kernel_rem_pio2+0x4e6>
 8004206:	ab4a      	add	r3, sp, #296	; 0x128
 8004208:	4423      	add	r3, r4
 800420a:	9306      	str	r3, [sp, #24]
 800420c:	461c      	mov	r4, r3
 800420e:	469a      	mov	sl, r3
 8004210:	9502      	str	r5, [sp, #8]
 8004212:	9b02      	ldr	r3, [sp, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	f1aa 0a08 	sub.w	sl, sl, #8
 800421a:	dc6b      	bgt.n	80042f4 <__kernel_rem_pio2+0x5ec>
 800421c:	46aa      	mov	sl, r5
 800421e:	f1ba 0f01 	cmp.w	sl, #1
 8004222:	f1a4 0408 	sub.w	r4, r4, #8
 8004226:	f300 8085 	bgt.w	8004334 <__kernel_rem_pio2+0x62c>
 800422a:	9c06      	ldr	r4, [sp, #24]
 800422c:	2000      	movs	r0, #0
 800422e:	3408      	adds	r4, #8
 8004230:	2100      	movs	r1, #0
 8004232:	2d01      	cmp	r5, #1
 8004234:	f300 809d 	bgt.w	8004372 <__kernel_rem_pio2+0x66a>
 8004238:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800423c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8004240:	f1bb 0f00 	cmp.w	fp, #0
 8004244:	f040 809b 	bne.w	800437e <__kernel_rem_pio2+0x676>
 8004248:	9b01      	ldr	r3, [sp, #4]
 800424a:	e9c3 5600 	strd	r5, r6, [r3]
 800424e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004252:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004256:	e7ca      	b.n	80041ee <__kernel_rem_pio2+0x4e6>
 8004258:	3408      	adds	r4, #8
 800425a:	ab4a      	add	r3, sp, #296	; 0x128
 800425c:	441c      	add	r4, r3
 800425e:	462e      	mov	r6, r5
 8004260:	2000      	movs	r0, #0
 8004262:	2100      	movs	r1, #0
 8004264:	2e00      	cmp	r6, #0
 8004266:	da36      	bge.n	80042d6 <__kernel_rem_pio2+0x5ce>
 8004268:	f1bb 0f00 	cmp.w	fp, #0
 800426c:	d039      	beq.n	80042e2 <__kernel_rem_pio2+0x5da>
 800426e:	4602      	mov	r2, r0
 8004270:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004274:	9c01      	ldr	r4, [sp, #4]
 8004276:	e9c4 2300 	strd	r2, r3, [r4]
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8004282:	f7fc f8d7 	bl	8000434 <__aeabi_dsub>
 8004286:	ae4c      	add	r6, sp, #304	; 0x130
 8004288:	2401      	movs	r4, #1
 800428a:	42a5      	cmp	r5, r4
 800428c:	da2c      	bge.n	80042e8 <__kernel_rem_pio2+0x5e0>
 800428e:	f1bb 0f00 	cmp.w	fp, #0
 8004292:	d002      	beq.n	800429a <__kernel_rem_pio2+0x592>
 8004294:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004298:	4619      	mov	r1, r3
 800429a:	9b01      	ldr	r3, [sp, #4]
 800429c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80042a0:	e7a5      	b.n	80041ee <__kernel_rem_pio2+0x4e6>
 80042a2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80042a6:	eb0d 0403 	add.w	r4, sp, r3
 80042aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80042ae:	2000      	movs	r0, #0
 80042b0:	2100      	movs	r1, #0
 80042b2:	2d00      	cmp	r5, #0
 80042b4:	da09      	bge.n	80042ca <__kernel_rem_pio2+0x5c2>
 80042b6:	f1bb 0f00 	cmp.w	fp, #0
 80042ba:	d002      	beq.n	80042c2 <__kernel_rem_pio2+0x5ba>
 80042bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80042c0:	4619      	mov	r1, r3
 80042c2:	9b01      	ldr	r3, [sp, #4]
 80042c4:	e9c3 0100 	strd	r0, r1, [r3]
 80042c8:	e791      	b.n	80041ee <__kernel_rem_pio2+0x4e6>
 80042ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80042ce:	f7fc f8b3 	bl	8000438 <__adddf3>
 80042d2:	3d01      	subs	r5, #1
 80042d4:	e7ed      	b.n	80042b2 <__kernel_rem_pio2+0x5aa>
 80042d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80042da:	f7fc f8ad 	bl	8000438 <__adddf3>
 80042de:	3e01      	subs	r6, #1
 80042e0:	e7c0      	b.n	8004264 <__kernel_rem_pio2+0x55c>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	e7c5      	b.n	8004274 <__kernel_rem_pio2+0x56c>
 80042e8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80042ec:	f7fc f8a4 	bl	8000438 <__adddf3>
 80042f0:	3401      	adds	r4, #1
 80042f2:	e7ca      	b.n	800428a <__kernel_rem_pio2+0x582>
 80042f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80042f8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80042fc:	9b02      	ldr	r3, [sp, #8]
 80042fe:	3b01      	subs	r3, #1
 8004300:	9302      	str	r3, [sp, #8]
 8004302:	4632      	mov	r2, r6
 8004304:	463b      	mov	r3, r7
 8004306:	4640      	mov	r0, r8
 8004308:	4649      	mov	r1, r9
 800430a:	f7fc f895 	bl	8000438 <__adddf3>
 800430e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4640      	mov	r0, r8
 8004318:	4649      	mov	r1, r9
 800431a:	f7fc f88b 	bl	8000434 <__aeabi_dsub>
 800431e:	4632      	mov	r2, r6
 8004320:	463b      	mov	r3, r7
 8004322:	f7fc f889 	bl	8000438 <__adddf3>
 8004326:	ed9d 7b08 	vldr	d7, [sp, #32]
 800432a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800432e:	ed8a 7b00 	vstr	d7, [sl]
 8004332:	e76e      	b.n	8004212 <__kernel_rem_pio2+0x50a>
 8004334:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004338:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800433c:	4640      	mov	r0, r8
 800433e:	4632      	mov	r2, r6
 8004340:	463b      	mov	r3, r7
 8004342:	4649      	mov	r1, r9
 8004344:	f7fc f878 	bl	8000438 <__adddf3>
 8004348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4640      	mov	r0, r8
 8004352:	4649      	mov	r1, r9
 8004354:	f7fc f86e 	bl	8000434 <__aeabi_dsub>
 8004358:	4632      	mov	r2, r6
 800435a:	463b      	mov	r3, r7
 800435c:	f7fc f86c 	bl	8000438 <__adddf3>
 8004360:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004364:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004368:	ed84 7b00 	vstr	d7, [r4]
 800436c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004370:	e755      	b.n	800421e <__kernel_rem_pio2+0x516>
 8004372:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004376:	f7fc f85f 	bl	8000438 <__adddf3>
 800437a:	3d01      	subs	r5, #1
 800437c:	e759      	b.n	8004232 <__kernel_rem_pio2+0x52a>
 800437e:	9b01      	ldr	r3, [sp, #4]
 8004380:	9a01      	ldr	r2, [sp, #4]
 8004382:	601d      	str	r5, [r3, #0]
 8004384:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004388:	605c      	str	r4, [r3, #4]
 800438a:	609f      	str	r7, [r3, #8]
 800438c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8004390:	60d3      	str	r3, [r2, #12]
 8004392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004396:	6110      	str	r0, [r2, #16]
 8004398:	6153      	str	r3, [r2, #20]
 800439a:	e728      	b.n	80041ee <__kernel_rem_pio2+0x4e6>
 800439c:	41700000 	.word	0x41700000
 80043a0:	3e700000 	.word	0x3e700000
 80043a4:	00000000 	.word	0x00000000

080043a8 <__kernel_sin>:
 80043a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ac:	ed2d 8b04 	vpush	{d8-d9}
 80043b0:	eeb0 8a41 	vmov.f32	s16, s2
 80043b4:	eef0 8a61 	vmov.f32	s17, s3
 80043b8:	ec55 4b10 	vmov	r4, r5, d0
 80043bc:	b083      	sub	sp, #12
 80043be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80043c2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80043c6:	9001      	str	r0, [sp, #4]
 80043c8:	da06      	bge.n	80043d8 <__kernel_sin+0x30>
 80043ca:	ee10 0a10 	vmov	r0, s0
 80043ce:	4629      	mov	r1, r5
 80043d0:	f7fc fa70 	bl	80008b4 <__aeabi_d2iz>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d051      	beq.n	800447c <__kernel_sin+0xd4>
 80043d8:	4622      	mov	r2, r4
 80043da:	462b      	mov	r3, r5
 80043dc:	4620      	mov	r0, r4
 80043de:	4629      	mov	r1, r5
 80043e0:	f7fb fefa 	bl	80001d8 <__aeabi_dmul>
 80043e4:	4682      	mov	sl, r0
 80043e6:	468b      	mov	fp, r1
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4620      	mov	r0, r4
 80043ee:	4629      	mov	r1, r5
 80043f0:	f7fb fef2 	bl	80001d8 <__aeabi_dmul>
 80043f4:	a341      	add	r3, pc, #260	; (adr r3, 80044fc <__kernel_sin+0x154>)
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	4680      	mov	r8, r0
 80043fc:	4689      	mov	r9, r1
 80043fe:	4650      	mov	r0, sl
 8004400:	4659      	mov	r1, fp
 8004402:	f7fb fee9 	bl	80001d8 <__aeabi_dmul>
 8004406:	a33f      	add	r3, pc, #252	; (adr r3, 8004504 <__kernel_sin+0x15c>)
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	f7fc f812 	bl	8000434 <__aeabi_dsub>
 8004410:	4652      	mov	r2, sl
 8004412:	465b      	mov	r3, fp
 8004414:	f7fb fee0 	bl	80001d8 <__aeabi_dmul>
 8004418:	a33c      	add	r3, pc, #240	; (adr r3, 800450c <__kernel_sin+0x164>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	f7fc f80b 	bl	8000438 <__adddf3>
 8004422:	4652      	mov	r2, sl
 8004424:	465b      	mov	r3, fp
 8004426:	f7fb fed7 	bl	80001d8 <__aeabi_dmul>
 800442a:	a33a      	add	r3, pc, #232	; (adr r3, 8004514 <__kernel_sin+0x16c>)
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	f7fc f800 	bl	8000434 <__aeabi_dsub>
 8004434:	4652      	mov	r2, sl
 8004436:	465b      	mov	r3, fp
 8004438:	f7fb fece 	bl	80001d8 <__aeabi_dmul>
 800443c:	a337      	add	r3, pc, #220	; (adr r3, 800451c <__kernel_sin+0x174>)
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f7fb fff9 	bl	8000438 <__adddf3>
 8004446:	9b01      	ldr	r3, [sp, #4]
 8004448:	4606      	mov	r6, r0
 800444a:	460f      	mov	r7, r1
 800444c:	b9eb      	cbnz	r3, 800448a <__kernel_sin+0xe2>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4650      	mov	r0, sl
 8004454:	4659      	mov	r1, fp
 8004456:	f7fb febf 	bl	80001d8 <__aeabi_dmul>
 800445a:	a325      	add	r3, pc, #148	; (adr r3, 80044f0 <__kernel_sin+0x148>)
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	f7fb ffe8 	bl	8000434 <__aeabi_dsub>
 8004464:	4642      	mov	r2, r8
 8004466:	464b      	mov	r3, r9
 8004468:	f7fb feb6 	bl	80001d8 <__aeabi_dmul>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4620      	mov	r0, r4
 8004472:	4629      	mov	r1, r5
 8004474:	f7fb ffe0 	bl	8000438 <__adddf3>
 8004478:	4604      	mov	r4, r0
 800447a:	460d      	mov	r5, r1
 800447c:	ec45 4b10 	vmov	d0, r4, r5
 8004480:	b003      	add	sp, #12
 8004482:	ecbd 8b04 	vpop	{d8-d9}
 8004486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800448a:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <__kernel_sin+0x150>)
 800448c:	ec51 0b18 	vmov	r0, r1, d8
 8004490:	2200      	movs	r2, #0
 8004492:	f7fb fea1 	bl	80001d8 <__aeabi_dmul>
 8004496:	4632      	mov	r2, r6
 8004498:	ec41 0b19 	vmov	d9, r0, r1
 800449c:	463b      	mov	r3, r7
 800449e:	4640      	mov	r0, r8
 80044a0:	4649      	mov	r1, r9
 80044a2:	f7fb fe99 	bl	80001d8 <__aeabi_dmul>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	ec51 0b19 	vmov	r0, r1, d9
 80044ae:	f7fb ffc1 	bl	8000434 <__aeabi_dsub>
 80044b2:	4652      	mov	r2, sl
 80044b4:	465b      	mov	r3, fp
 80044b6:	f7fb fe8f 	bl	80001d8 <__aeabi_dmul>
 80044ba:	ec53 2b18 	vmov	r2, r3, d8
 80044be:	f7fb ffb9 	bl	8000434 <__aeabi_dsub>
 80044c2:	a30b      	add	r3, pc, #44	; (adr r3, 80044f0 <__kernel_sin+0x148>)
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	4606      	mov	r6, r0
 80044ca:	460f      	mov	r7, r1
 80044cc:	4640      	mov	r0, r8
 80044ce:	4649      	mov	r1, r9
 80044d0:	f7fb fe82 	bl	80001d8 <__aeabi_dmul>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4630      	mov	r0, r6
 80044da:	4639      	mov	r1, r7
 80044dc:	f7fb ffac 	bl	8000438 <__adddf3>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4620      	mov	r0, r4
 80044e6:	4629      	mov	r1, r5
 80044e8:	f7fb ffa4 	bl	8000434 <__aeabi_dsub>
 80044ec:	e7c4      	b.n	8004478 <__kernel_sin+0xd0>
 80044ee:	bf00      	nop
 80044f0:	55555549 	.word	0x55555549
 80044f4:	3fc55555 	.word	0x3fc55555
 80044f8:	3fe00000 	.word	0x3fe00000
 80044fc:	5acfd57c 	.word	0x5acfd57c
 8004500:	3de5d93a 	.word	0x3de5d93a
 8004504:	8a2b9ceb 	.word	0x8a2b9ceb
 8004508:	3e5ae5e6 	.word	0x3e5ae5e6
 800450c:	57b1fe7d 	.word	0x57b1fe7d
 8004510:	3ec71de3 	.word	0x3ec71de3
 8004514:	19c161d5 	.word	0x19c161d5
 8004518:	3f2a01a0 	.word	0x3f2a01a0
 800451c:	1110f8a6 	.word	0x1110f8a6
 8004520:	3f811111 	.word	0x3f811111

08004524 <fabs>:
 8004524:	ec51 0b10 	vmov	r0, r1, d0
 8004528:	ee10 2a10 	vmov	r2, s0
 800452c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004530:	ec43 2b10 	vmov	d0, r2, r3
 8004534:	4770      	bx	lr
	...

08004538 <floor>:
 8004538:	ec51 0b10 	vmov	r0, r1, d0
 800453c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004540:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004544:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004548:	2e13      	cmp	r6, #19
 800454a:	ee10 5a10 	vmov	r5, s0
 800454e:	ee10 8a10 	vmov	r8, s0
 8004552:	460c      	mov	r4, r1
 8004554:	dc32      	bgt.n	80045bc <floor+0x84>
 8004556:	2e00      	cmp	r6, #0
 8004558:	da14      	bge.n	8004584 <floor+0x4c>
 800455a:	a333      	add	r3, pc, #204	; (adr r3, 8004628 <floor+0xf0>)
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	f7fb ff6a 	bl	8000438 <__adddf3>
 8004564:	2200      	movs	r2, #0
 8004566:	2300      	movs	r3, #0
 8004568:	f7fc f99a 	bl	80008a0 <__aeabi_dcmpgt>
 800456c:	b138      	cbz	r0, 800457e <floor+0x46>
 800456e:	2c00      	cmp	r4, #0
 8004570:	da57      	bge.n	8004622 <floor+0xea>
 8004572:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004576:	431d      	orrs	r5, r3
 8004578:	d001      	beq.n	800457e <floor+0x46>
 800457a:	4c2d      	ldr	r4, [pc, #180]	; (8004630 <floor+0xf8>)
 800457c:	2500      	movs	r5, #0
 800457e:	4621      	mov	r1, r4
 8004580:	4628      	mov	r0, r5
 8004582:	e025      	b.n	80045d0 <floor+0x98>
 8004584:	4f2b      	ldr	r7, [pc, #172]	; (8004634 <floor+0xfc>)
 8004586:	4137      	asrs	r7, r6
 8004588:	ea01 0307 	and.w	r3, r1, r7
 800458c:	4303      	orrs	r3, r0
 800458e:	d01f      	beq.n	80045d0 <floor+0x98>
 8004590:	a325      	add	r3, pc, #148	; (adr r3, 8004628 <floor+0xf0>)
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	f7fb ff4f 	bl	8000438 <__adddf3>
 800459a:	2200      	movs	r2, #0
 800459c:	2300      	movs	r3, #0
 800459e:	f7fc f97f 	bl	80008a0 <__aeabi_dcmpgt>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d0eb      	beq.n	800457e <floor+0x46>
 80045a6:	2c00      	cmp	r4, #0
 80045a8:	bfbe      	ittt	lt
 80045aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80045ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80045b2:	19a4      	addlt	r4, r4, r6
 80045b4:	ea24 0407 	bic.w	r4, r4, r7
 80045b8:	2500      	movs	r5, #0
 80045ba:	e7e0      	b.n	800457e <floor+0x46>
 80045bc:	2e33      	cmp	r6, #51	; 0x33
 80045be:	dd0b      	ble.n	80045d8 <floor+0xa0>
 80045c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80045c4:	d104      	bne.n	80045d0 <floor+0x98>
 80045c6:	ee10 2a10 	vmov	r2, s0
 80045ca:	460b      	mov	r3, r1
 80045cc:	f7fb ff34 	bl	8000438 <__adddf3>
 80045d0:	ec41 0b10 	vmov	d0, r0, r1
 80045d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80045dc:	f04f 33ff 	mov.w	r3, #4294967295
 80045e0:	fa23 f707 	lsr.w	r7, r3, r7
 80045e4:	4207      	tst	r7, r0
 80045e6:	d0f3      	beq.n	80045d0 <floor+0x98>
 80045e8:	a30f      	add	r3, pc, #60	; (adr r3, 8004628 <floor+0xf0>)
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f7fb ff23 	bl	8000438 <__adddf3>
 80045f2:	2200      	movs	r2, #0
 80045f4:	2300      	movs	r3, #0
 80045f6:	f7fc f953 	bl	80008a0 <__aeabi_dcmpgt>
 80045fa:	2800      	cmp	r0, #0
 80045fc:	d0bf      	beq.n	800457e <floor+0x46>
 80045fe:	2c00      	cmp	r4, #0
 8004600:	da02      	bge.n	8004608 <floor+0xd0>
 8004602:	2e14      	cmp	r6, #20
 8004604:	d103      	bne.n	800460e <floor+0xd6>
 8004606:	3401      	adds	r4, #1
 8004608:	ea25 0507 	bic.w	r5, r5, r7
 800460c:	e7b7      	b.n	800457e <floor+0x46>
 800460e:	2301      	movs	r3, #1
 8004610:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004614:	fa03 f606 	lsl.w	r6, r3, r6
 8004618:	4435      	add	r5, r6
 800461a:	4545      	cmp	r5, r8
 800461c:	bf38      	it	cc
 800461e:	18e4      	addcc	r4, r4, r3
 8004620:	e7f2      	b.n	8004608 <floor+0xd0>
 8004622:	2500      	movs	r5, #0
 8004624:	462c      	mov	r4, r5
 8004626:	e7aa      	b.n	800457e <floor+0x46>
 8004628:	8800759c 	.word	0x8800759c
 800462c:	7e37e43c 	.word	0x7e37e43c
 8004630:	bff00000 	.word	0xbff00000
 8004634:	000fffff 	.word	0x000fffff

08004638 <scalbn>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	ec55 4b10 	vmov	r4, r5, d0
 800463e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004642:	4606      	mov	r6, r0
 8004644:	462b      	mov	r3, r5
 8004646:	b99a      	cbnz	r2, 8004670 <scalbn+0x38>
 8004648:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800464c:	4323      	orrs	r3, r4
 800464e:	d036      	beq.n	80046be <scalbn+0x86>
 8004650:	4b39      	ldr	r3, [pc, #228]	; (8004738 <scalbn+0x100>)
 8004652:	4629      	mov	r1, r5
 8004654:	ee10 0a10 	vmov	r0, s0
 8004658:	2200      	movs	r2, #0
 800465a:	f7fb fdbd 	bl	80001d8 <__aeabi_dmul>
 800465e:	4b37      	ldr	r3, [pc, #220]	; (800473c <scalbn+0x104>)
 8004660:	429e      	cmp	r6, r3
 8004662:	4604      	mov	r4, r0
 8004664:	460d      	mov	r5, r1
 8004666:	da10      	bge.n	800468a <scalbn+0x52>
 8004668:	a32b      	add	r3, pc, #172	; (adr r3, 8004718 <scalbn+0xe0>)
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	e03a      	b.n	80046e6 <scalbn+0xae>
 8004670:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004674:	428a      	cmp	r2, r1
 8004676:	d10c      	bne.n	8004692 <scalbn+0x5a>
 8004678:	ee10 2a10 	vmov	r2, s0
 800467c:	4620      	mov	r0, r4
 800467e:	4629      	mov	r1, r5
 8004680:	f7fb feda 	bl	8000438 <__adddf3>
 8004684:	4604      	mov	r4, r0
 8004686:	460d      	mov	r5, r1
 8004688:	e019      	b.n	80046be <scalbn+0x86>
 800468a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800468e:	460b      	mov	r3, r1
 8004690:	3a36      	subs	r2, #54	; 0x36
 8004692:	4432      	add	r2, r6
 8004694:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004698:	428a      	cmp	r2, r1
 800469a:	dd08      	ble.n	80046ae <scalbn+0x76>
 800469c:	2d00      	cmp	r5, #0
 800469e:	a120      	add	r1, pc, #128	; (adr r1, 8004720 <scalbn+0xe8>)
 80046a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046a4:	da1c      	bge.n	80046e0 <scalbn+0xa8>
 80046a6:	a120      	add	r1, pc, #128	; (adr r1, 8004728 <scalbn+0xf0>)
 80046a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046ac:	e018      	b.n	80046e0 <scalbn+0xa8>
 80046ae:	2a00      	cmp	r2, #0
 80046b0:	dd08      	ble.n	80046c4 <scalbn+0x8c>
 80046b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80046b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80046ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80046be:	ec45 4b10 	vmov	d0, r4, r5
 80046c2:	bd70      	pop	{r4, r5, r6, pc}
 80046c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80046c8:	da19      	bge.n	80046fe <scalbn+0xc6>
 80046ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80046ce:	429e      	cmp	r6, r3
 80046d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80046d4:	dd0a      	ble.n	80046ec <scalbn+0xb4>
 80046d6:	a112      	add	r1, pc, #72	; (adr r1, 8004720 <scalbn+0xe8>)
 80046d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e2      	bne.n	80046a6 <scalbn+0x6e>
 80046e0:	a30f      	add	r3, pc, #60	; (adr r3, 8004720 <scalbn+0xe8>)
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	f7fb fd77 	bl	80001d8 <__aeabi_dmul>
 80046ea:	e7cb      	b.n	8004684 <scalbn+0x4c>
 80046ec:	a10a      	add	r1, pc, #40	; (adr r1, 8004718 <scalbn+0xe0>)
 80046ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0b8      	beq.n	8004668 <scalbn+0x30>
 80046f6:	a10e      	add	r1, pc, #56	; (adr r1, 8004730 <scalbn+0xf8>)
 80046f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046fc:	e7b4      	b.n	8004668 <scalbn+0x30>
 80046fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004702:	3236      	adds	r2, #54	; 0x36
 8004704:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004708:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800470c:	4620      	mov	r0, r4
 800470e:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <scalbn+0x108>)
 8004710:	2200      	movs	r2, #0
 8004712:	e7e8      	b.n	80046e6 <scalbn+0xae>
 8004714:	f3af 8000 	nop.w
 8004718:	c2f8f359 	.word	0xc2f8f359
 800471c:	01a56e1f 	.word	0x01a56e1f
 8004720:	8800759c 	.word	0x8800759c
 8004724:	7e37e43c 	.word	0x7e37e43c
 8004728:	8800759c 	.word	0x8800759c
 800472c:	fe37e43c 	.word	0xfe37e43c
 8004730:	c2f8f359 	.word	0xc2f8f359
 8004734:	81a56e1f 	.word	0x81a56e1f
 8004738:	43500000 	.word	0x43500000
 800473c:	ffff3cb0 	.word	0xffff3cb0
 8004740:	3c900000 	.word	0x3c900000

08004744 <__libc_init_array>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	4d0d      	ldr	r5, [pc, #52]	; (800477c <__libc_init_array+0x38>)
 8004748:	4c0d      	ldr	r4, [pc, #52]	; (8004780 <__libc_init_array+0x3c>)
 800474a:	1b64      	subs	r4, r4, r5
 800474c:	10a4      	asrs	r4, r4, #2
 800474e:	2600      	movs	r6, #0
 8004750:	42a6      	cmp	r6, r4
 8004752:	d109      	bne.n	8004768 <__libc_init_array+0x24>
 8004754:	4d0b      	ldr	r5, [pc, #44]	; (8004784 <__libc_init_array+0x40>)
 8004756:	4c0c      	ldr	r4, [pc, #48]	; (8004788 <__libc_init_array+0x44>)
 8004758:	f000 f820 	bl	800479c <_init>
 800475c:	1b64      	subs	r4, r4, r5
 800475e:	10a4      	asrs	r4, r4, #2
 8004760:	2600      	movs	r6, #0
 8004762:	42a6      	cmp	r6, r4
 8004764:	d105      	bne.n	8004772 <__libc_init_array+0x2e>
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	f855 3b04 	ldr.w	r3, [r5], #4
 800476c:	4798      	blx	r3
 800476e:	3601      	adds	r6, #1
 8004770:	e7ee      	b.n	8004750 <__libc_init_array+0xc>
 8004772:	f855 3b04 	ldr.w	r3, [r5], #4
 8004776:	4798      	blx	r3
 8004778:	3601      	adds	r6, #1
 800477a:	e7f2      	b.n	8004762 <__libc_init_array+0x1e>
 800477c:	080049a8 	.word	0x080049a8
 8004780:	080049a8 	.word	0x080049a8
 8004784:	080049a8 	.word	0x080049a8
 8004788:	080049ac 	.word	0x080049ac

0800478c <memset>:
 800478c:	4402      	add	r2, r0
 800478e:	4603      	mov	r3, r0
 8004790:	4293      	cmp	r3, r2
 8004792:	d100      	bne.n	8004796 <memset+0xa>
 8004794:	4770      	bx	lr
 8004796:	f803 1b01 	strb.w	r1, [r3], #1
 800479a:	e7f9      	b.n	8004790 <memset+0x4>

0800479c <_init>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	bf00      	nop
 80047a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a2:	bc08      	pop	{r3}
 80047a4:	469e      	mov	lr, r3
 80047a6:	4770      	bx	lr

080047a8 <_fini>:
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	bf00      	nop
 80047ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ae:	bc08      	pop	{r3}
 80047b0:	469e      	mov	lr, r3
 80047b2:	4770      	bx	lr
